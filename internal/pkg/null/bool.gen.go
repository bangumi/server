// Code generated by ./internal/cmd/gen/null/main.go. DO NOT EDIT.

// SPDX-License-Identifier: AGPL-3.0-only
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>

package null

import (
	"bytes"

	"github.com/goccy/go-json"
)

var _ json.Unmarshaler = (*Bool)(nil)

// Bool is a nullable type.
type Bool struct {
	Bool bool
	Set  bool // if json object has this field
	Null bool // if json field's value is `null`
}

// NewBool creates a new bool.
func NewBool(t bool) Bool {
	return Bool{
		Null: false,
		Bool: t,
		Set:  true,
	}
}

func (t Bool) HasValue() bool {
	return t.Set && !t.Null
}

func (t Bool) Ptr() *bool {
	if t.Set && !t.Null {
		return &t.Bool
	}

	return nil
}

func (t Bool) Interface() interface{} {
	if t.Set && !t.Null {
		return &t.Bool
	}

	return nil
}

// Default return default value its value is Null or not Set.
func (t Bool) Default(v bool) bool {
	if t.Null && t.Set {
		return t.Bool
	}

	return v
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *Bool) UnmarshalJSON(data []byte) error {
	t.Set = true

	if bytes.Equal(data, nilBytes) {
		t.Null = true
		return nil
	}

	if err := json.UnmarshalNoEscape(data, &t.Bool); err != nil {
		return err //nolint:wrapcheck
	}

	return nil
}
