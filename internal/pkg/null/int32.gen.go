// Code generated by ./internal/cmd/gen/null/main.go. DO NOT EDIT.

// SPDX-License-Identifier: AGPL-3.0-only
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>

package null

import (
	"bytes"

	"github.com/goccy/go-json"
)

var _ json.Unmarshaler = (*Int32)(nil)

// Int32 is a nullable type.
type Int32 struct {
	Value int32
	Set   bool // if json object has this field
	Null  bool // if json field's value is `null`
}

// NewInt32 creates a new int32.
func NewInt32(t int32) Int32 {
	return Int32{
		Null:  false,
		Value: t,
		Set:   true,
	}
}

func (t Int32) HasValue() bool {
	return t.Set && !t.Null
}

func (t Int32) Ptr() *int32 {
	if t.Set && !t.Null {
		return &t.Value
	}

	return nil
}

// Default return default value its value is Null or not Set.
func (t Int32) Default(v int32) int32 {
	if t.Set && !t.Null {
		return t.Value
	}

	return v
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *Int32) UnmarshalJSON(data []byte) error {
	t.Set = true

	if bytes.Equal(data, nilBytes) {
		t.Null = true
		return nil
	}

	if err := json.UnmarshalNoEscape(data, &t.Value); err != nil {
		return err //nolint:wrapcheck
	}

	return nil
}
