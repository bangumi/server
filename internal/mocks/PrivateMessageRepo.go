// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bangumi/server/internal/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// PrivateMessageRepo is an autogenerated mock type for the PrivateMessageRepo type
type PrivateMessageRepo struct {
	mock.Mock
}

type PrivateMessageRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PrivateMessageRepo) EXPECT() *PrivateMessageRepo_Expecter {
	return &PrivateMessageRepo_Expecter{mock: &_m.Mock}
}

// CountByFolder provides a mock function with given fields: ctx, userID, folder
func (_m *PrivateMessageRepo) CountByFolder(ctx context.Context, userID model.UserID, folder model.PrivateMessageFolderType) (int64, error) {
	ret := _m.Called(ctx, userID, folder)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.PrivateMessageFolderType) int64); ok {
		r0 = rf(ctx, userID, folder)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, model.PrivateMessageFolderType) error); ok {
		r1 = rf(ctx, userID, folder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_CountByFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByFolder'
type PrivateMessageRepo_CountByFolder_Call struct {
	*mock.Call
}

// CountByFolder is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - folder model.PrivateMessageFolderType
func (_e *PrivateMessageRepo_Expecter) CountByFolder(ctx interface{}, userID interface{}, folder interface{}) *PrivateMessageRepo_CountByFolder_Call {
	return &PrivateMessageRepo_CountByFolder_Call{Call: _e.mock.On("CountByFolder", ctx, userID, folder)}
}

func (_c *PrivateMessageRepo_CountByFolder_Call) Run(run func(ctx context.Context, userID model.UserID, folder model.PrivateMessageFolderType)) *PrivateMessageRepo_CountByFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.PrivateMessageFolderType))
	})
	return _c
}

func (_c *PrivateMessageRepo_CountByFolder_Call) Return(_a0 int64, _a1 error) *PrivateMessageRepo_CountByFolder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CountTypes provides a mock function with given fields: ctx, userID
func (_m *PrivateMessageRepo) CountTypes(ctx context.Context, userID model.UserID) (model.PrivateMessageTypeCounts, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.PrivateMessageTypeCounts
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) model.PrivateMessageTypeCounts); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.PrivateMessageTypeCounts)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_CountTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountTypes'
type PrivateMessageRepo_CountTypes_Call struct {
	*mock.Call
}

// CountTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
func (_e *PrivateMessageRepo_Expecter) CountTypes(ctx interface{}, userID interface{}) *PrivateMessageRepo_CountTypes_Call {
	return &PrivateMessageRepo_CountTypes_Call{Call: _e.mock.On("CountTypes", ctx, userID)}
}

func (_c *PrivateMessageRepo_CountTypes_Call) Run(run func(ctx context.Context, userID model.UserID)) *PrivateMessageRepo_CountTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID))
	})
	return _c
}

func (_c *PrivateMessageRepo_CountTypes_Call) Return(_a0 model.PrivateMessageTypeCounts, _a1 error) *PrivateMessageRepo_CountTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Create provides a mock function with given fields: ctx, senderID, receiverIDs, relatedIDFilter, title, content
func (_m *PrivateMessageRepo) Create(ctx context.Context, senderID model.UserID, receiverIDs []model.UserID, relatedIDFilter domain.PrivateMessageIDFilter, title string, content string) ([]model.PrivateMessage, error) {
	ret := _m.Called(ctx, senderID, receiverIDs, relatedIDFilter, title, content)

	var r0 []model.PrivateMessage
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, []model.UserID, domain.PrivateMessageIDFilter, string, string) []model.PrivateMessage); ok {
		r0 = rf(ctx, senderID, receiverIDs, relatedIDFilter, title, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PrivateMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, []model.UserID, domain.PrivateMessageIDFilter, string, string) error); ok {
		r1 = rf(ctx, senderID, receiverIDs, relatedIDFilter, title, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PrivateMessageRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - senderID model.UserID
//   - receiverIDs []model.UserID
//   - relatedIDFilter domain.PrivateMessageIDFilter
//   - title string
//   - content string
func (_e *PrivateMessageRepo_Expecter) Create(ctx interface{}, senderID interface{}, receiverIDs interface{}, relatedIDFilter interface{}, title interface{}, content interface{}) *PrivateMessageRepo_Create_Call {
	return &PrivateMessageRepo_Create_Call{Call: _e.mock.On("Create", ctx, senderID, receiverIDs, relatedIDFilter, title, content)}
}

func (_c *PrivateMessageRepo_Create_Call) Run(run func(ctx context.Context, senderID model.UserID, receiverIDs []model.UserID, relatedIDFilter domain.PrivateMessageIDFilter, title string, content string)) *PrivateMessageRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].([]model.UserID), args[3].(domain.PrivateMessageIDFilter), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *PrivateMessageRepo_Create_Call) Return(_a0 []model.PrivateMessage, _a1 error) *PrivateMessageRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, ids
func (_m *PrivateMessageRepo) Delete(ctx context.Context, userID model.UserID, ids []model.PrivateMessageID) error {
	ret := _m.Called(ctx, userID, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, []model.PrivateMessageID) error); ok {
		r0 = rf(ctx, userID, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrivateMessageRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PrivateMessageRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - ids []model.PrivateMessageID
func (_e *PrivateMessageRepo_Expecter) Delete(ctx interface{}, userID interface{}, ids interface{}) *PrivateMessageRepo_Delete_Call {
	return &PrivateMessageRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, ids)}
}

func (_c *PrivateMessageRepo_Delete_Call) Run(run func(ctx context.Context, userID model.UserID, ids []model.PrivateMessageID)) *PrivateMessageRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].([]model.PrivateMessageID))
	})
	return _c
}

func (_c *PrivateMessageRepo_Delete_Call) Return(_a0 error) *PrivateMessageRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// List provides a mock function with given fields: ctx, userID, folder, offset, limit
func (_m *PrivateMessageRepo) List(ctx context.Context, userID model.UserID, folder model.PrivateMessageFolderType, offset int, limit int) ([]model.PrivateMessageListItem, error) {
	ret := _m.Called(ctx, userID, folder, offset, limit)

	var r0 []model.PrivateMessageListItem
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.PrivateMessageFolderType, int, int) []model.PrivateMessageListItem); ok {
		r0 = rf(ctx, userID, folder, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PrivateMessageListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, model.PrivateMessageFolderType, int, int) error); ok {
		r1 = rf(ctx, userID, folder, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PrivateMessageRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - folder model.PrivateMessageFolderType
//   - offset int
//   - limit int
func (_e *PrivateMessageRepo_Expecter) List(ctx interface{}, userID interface{}, folder interface{}, offset interface{}, limit interface{}) *PrivateMessageRepo_List_Call {
	return &PrivateMessageRepo_List_Call{Call: _e.mock.On("List", ctx, userID, folder, offset, limit)}
}

func (_c *PrivateMessageRepo_List_Call) Run(run func(ctx context.Context, userID model.UserID, folder model.PrivateMessageFolderType, offset int, limit int)) *PrivateMessageRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.PrivateMessageFolderType), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *PrivateMessageRepo_List_Call) Return(_a0 []model.PrivateMessageListItem, _a1 error) *PrivateMessageRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListRecentContact provides a mock function with given fields: ctx, userID
func (_m *PrivateMessageRepo) ListRecentContact(ctx context.Context, userID model.UserID) ([]model.UserID, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.UserID
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) []model.UserID); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_ListRecentContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecentContact'
type PrivateMessageRepo_ListRecentContact_Call struct {
	*mock.Call
}

// ListRecentContact is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
func (_e *PrivateMessageRepo_Expecter) ListRecentContact(ctx interface{}, userID interface{}) *PrivateMessageRepo_ListRecentContact_Call {
	return &PrivateMessageRepo_ListRecentContact_Call{Call: _e.mock.On("ListRecentContact", ctx, userID)}
}

func (_c *PrivateMessageRepo_ListRecentContact_Call) Run(run func(ctx context.Context, userID model.UserID)) *PrivateMessageRepo_ListRecentContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID))
	})
	return _c
}

func (_c *PrivateMessageRepo_ListRecentContact_Call) Return(_a0 []model.UserID, _a1 error) *PrivateMessageRepo_ListRecentContact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListRelated provides a mock function with given fields: ctx, userID, id
func (_m *PrivateMessageRepo) ListRelated(ctx context.Context, userID model.UserID, id model.PrivateMessageID) ([]model.PrivateMessage, error) {
	ret := _m.Called(ctx, userID, id)

	var r0 []model.PrivateMessage
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.PrivateMessageID) []model.PrivateMessage); ok {
		r0 = rf(ctx, userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PrivateMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, model.PrivateMessageID) error); ok {
		r1 = rf(ctx, userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateMessageRepo_ListRelated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelated'
type PrivateMessageRepo_ListRelated_Call struct {
	*mock.Call
}

// ListRelated is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - id model.PrivateMessageID
func (_e *PrivateMessageRepo_Expecter) ListRelated(ctx interface{}, userID interface{}, id interface{}) *PrivateMessageRepo_ListRelated_Call {
	return &PrivateMessageRepo_ListRelated_Call{Call: _e.mock.On("ListRelated", ctx, userID, id)}
}

func (_c *PrivateMessageRepo_ListRelated_Call) Run(run func(ctx context.Context, userID model.UserID, id model.PrivateMessageID)) *PrivateMessageRepo_ListRelated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.PrivateMessageID))
	})
	return _c
}

func (_c *PrivateMessageRepo_ListRelated_Call) Return(_a0 []model.PrivateMessage, _a1 error) *PrivateMessageRepo_ListRelated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MarkRead provides a mock function with given fields: ctx, userID, relatedID
func (_m *PrivateMessageRepo) MarkRead(ctx context.Context, userID model.UserID, relatedID model.PrivateMessageID) error {
	ret := _m.Called(ctx, userID, relatedID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.PrivateMessageID) error); ok {
		r0 = rf(ctx, userID, relatedID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrivateMessageRepo_MarkRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkRead'
type PrivateMessageRepo_MarkRead_Call struct {
	*mock.Call
}

// MarkRead is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - relatedID model.PrivateMessageID
func (_e *PrivateMessageRepo_Expecter) MarkRead(ctx interface{}, userID interface{}, relatedID interface{}) *PrivateMessageRepo_MarkRead_Call {
	return &PrivateMessageRepo_MarkRead_Call{Call: _e.mock.On("MarkRead", ctx, userID, relatedID)}
}

func (_c *PrivateMessageRepo_MarkRead_Call) Run(run func(ctx context.Context, userID model.UserID, relatedID model.PrivateMessageID)) *PrivateMessageRepo_MarkRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.PrivateMessageID))
	})
	return _c
}

func (_c *PrivateMessageRepo_MarkRead_Call) Return(_a0 error) *PrivateMessageRepo_MarkRead_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewPrivateMessageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrivateMessageRepo creates a new instance of PrivateMessageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrivateMessageRepo(t mockConstructorTestingTNewPrivateMessageRepo) *PrivateMessageRepo {
	mock := &PrivateMessageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
