// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// GroupRepo is an autogenerated mock type for the GroupRepo type
type GroupRepo struct {
	mock.Mock
}

type GroupRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupRepo) EXPECT() *GroupRepo_Expecter {
	return &GroupRepo_Expecter{mock: &_m.Mock}
}

// CountMembersByID provides a mock function with given fields: ctx, id
func (_m *GroupRepo) CountMembersByID(ctx context.Context, id model.GroupID) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.GroupID) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GroupID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_CountMembersByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMembersByID'
type GroupRepo_CountMembersByID_Call struct {
	*mock.Call
}

// CountMembersByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id model.GroupID
func (_e *GroupRepo_Expecter) CountMembersByID(ctx interface{}, id interface{}) *GroupRepo_CountMembersByID_Call {
	return &GroupRepo_CountMembersByID_Call{Call: _e.mock.On("CountMembersByID", ctx, id)}
}

func (_c *GroupRepo_CountMembersByID_Call) Run(run func(ctx context.Context, id model.GroupID)) *GroupRepo_CountMembersByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GroupID))
	})
	return _c
}

func (_c *GroupRepo_CountMembersByID_Call) Return(_a0 int64, _a1 error) *GroupRepo_CountMembersByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CountMembersByName provides a mock function with given fields: ctx, name
func (_m *GroupRepo) CountMembersByName(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_CountMembersByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMembersByName'
type GroupRepo_CountMembersByName_Call struct {
	*mock.Call
}

// CountMembersByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *GroupRepo_Expecter) CountMembersByName(ctx interface{}, name interface{}) *GroupRepo_CountMembersByName_Call {
	return &GroupRepo_CountMembersByName_Call{Call: _e.mock.On("CountMembersByName", ctx, name)}
}

func (_c *GroupRepo_CountMembersByName_Call) Run(run func(ctx context.Context, name string)) *GroupRepo_CountMembersByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupRepo_CountMembersByName_Call) Return(_a0 int64, _a1 error) *GroupRepo_CountMembersByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *GroupRepo) GetByID(ctx context.Context, id model.GroupID) (model.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(context.Context, model.GroupID) model.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GroupID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type GroupRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id model.GroupID
func (_e *GroupRepo_Expecter) GetByID(ctx interface{}, id interface{}) *GroupRepo_GetByID_Call {
	return &GroupRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *GroupRepo_GetByID_Call) Run(run func(ctx context.Context, id model.GroupID)) *GroupRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GroupID))
	})
	return _c
}

func (_c *GroupRepo_GetByID_Call) Return(_a0 model.Group, _a1 error) *GroupRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *GroupRepo) GetByName(ctx context.Context, name string) (model.Group, error) {
	ret := _m.Called(ctx, name)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Group); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type GroupRepo_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *GroupRepo_Expecter) GetByName(ctx interface{}, name interface{}) *GroupRepo_GetByName_Call {
	return &GroupRepo_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *GroupRepo_GetByName_Call) Run(run func(ctx context.Context, name string)) *GroupRepo_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupRepo_GetByName_Call) Return(_a0 model.Group, _a1 error) *GroupRepo_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListMembersByID provides a mock function with given fields: ctx, id, limit, offset
func (_m *GroupRepo) ListMembersByID(ctx context.Context, id model.GroupID, limit int, offset int) ([]model.GroupMember, error) {
	ret := _m.Called(ctx, id, limit, offset)

	var r0 []model.GroupMember
	if rf, ok := ret.Get(0).(func(context.Context, model.GroupID, int, int) []model.GroupMember); ok {
		r0 = rf(ctx, id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GroupMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GroupID, int, int) error); ok {
		r1 = rf(ctx, id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_ListMembersByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembersByID'
type GroupRepo_ListMembersByID_Call struct {
	*mock.Call
}

// ListMembersByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id model.GroupID
//  - limit int
//  - offset int
func (_e *GroupRepo_Expecter) ListMembersByID(ctx interface{}, id interface{}, limit interface{}, offset interface{}) *GroupRepo_ListMembersByID_Call {
	return &GroupRepo_ListMembersByID_Call{Call: _e.mock.On("ListMembersByID", ctx, id, limit, offset)}
}

func (_c *GroupRepo_ListMembersByID_Call) Run(run func(ctx context.Context, id model.GroupID, limit int, offset int)) *GroupRepo_ListMembersByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GroupID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *GroupRepo_ListMembersByID_Call) Return(_a0 []model.GroupMember, _a1 error) *GroupRepo_ListMembersByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListMembersByName provides a mock function with given fields: ctx, name, limit, offset
func (_m *GroupRepo) ListMembersByName(ctx context.Context, name string, limit int, offset int) ([]model.GroupMember, error) {
	ret := _m.Called(ctx, name, limit, offset)

	var r0 []model.GroupMember
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []model.GroupMember); ok {
		r0 = rf(ctx, name, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GroupMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, name, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepo_ListMembersByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembersByName'
type GroupRepo_ListMembersByName_Call struct {
	*mock.Call
}

// ListMembersByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - limit int
//  - offset int
func (_e *GroupRepo_Expecter) ListMembersByName(ctx interface{}, name interface{}, limit interface{}, offset interface{}) *GroupRepo_ListMembersByName_Call {
	return &GroupRepo_ListMembersByName_Call{Call: _e.mock.On("ListMembersByName", ctx, name, limit, offset)}
}

func (_c *GroupRepo_ListMembersByName_Call) Run(run func(ctx context.Context, name string, limit int, offset int)) *GroupRepo_ListMembersByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *GroupRepo_ListMembersByName_Call) Return(_a0 []model.GroupMember, _a1 error) *GroupRepo_ListMembersByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewGroupRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupRepo creates a new instance of GroupRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupRepo(t NewGroupRepoT) *GroupRepo {
	mock := &GroupRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
