// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/bangumi/server/internal/auth"
	collection "github.com/bangumi/server/internal/collection"

	context "context"

	episode "github.com/bangumi/server/internal/episode"

	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// TimeLineRepo is an autogenerated mock type for the Repo type
type TimeLineRepo struct {
	mock.Mock
}

type TimeLineRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TimeLineRepo) EXPECT() *TimeLineRepo_Expecter {
	return &TimeLineRepo_Expecter{mock: &_m.Mock}
}

// ChangeEpisodeStatus provides a mock function with given fields: ctx, u, sbj, _a3, update
func (_m *TimeLineRepo) ChangeEpisodeStatus(ctx context.Context, u auth.Auth, sbj model.Subject, _a3 episode.Episode, update collection.Update) error {
	ret := _m.Called(ctx, u, sbj, _a3, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.Auth, model.Subject, episode.Episode, collection.Update) error); ok {
		r0 = rf(ctx, u, sbj, _a3, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimeLineRepo_ChangeEpisodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeEpisodeStatus'
type TimeLineRepo_ChangeEpisodeStatus_Call struct {
	*mock.Call
}

// ChangeEpisodeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - u auth.Auth
//   - sbj model.Subject
//   - _a3 episode.Episode
//   - update collection.Update
func (_e *TimeLineRepo_Expecter) ChangeEpisodeStatus(ctx interface{}, u interface{}, sbj interface{}, _a3 interface{}, update interface{}) *TimeLineRepo_ChangeEpisodeStatus_Call {
	return &TimeLineRepo_ChangeEpisodeStatus_Call{Call: _e.mock.On("ChangeEpisodeStatus", ctx, u, sbj, _a3, update)}
}

func (_c *TimeLineRepo_ChangeEpisodeStatus_Call) Run(run func(ctx context.Context, u auth.Auth, sbj model.Subject, _a3 episode.Episode, update collection.Update)) *TimeLineRepo_ChangeEpisodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.Auth), args[2].(model.Subject), args[3].(episode.Episode), args[4].(collection.Update))
	})
	return _c
}

func (_c *TimeLineRepo_ChangeEpisodeStatus_Call) Return(_a0 error) *TimeLineRepo_ChangeEpisodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

// ChangeSubjectCollection provides a mock function with given fields: ctx, u, sbj, collect, comment, rate
func (_m *TimeLineRepo) ChangeSubjectCollection(ctx context.Context, u auth.Auth, sbj model.Subject, collect model.SubjectCollection, comment string, rate uint8) error {
	ret := _m.Called(ctx, u, sbj, collect, comment, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.Auth, model.Subject, model.SubjectCollection, string, uint8) error); ok {
		r0 = rf(ctx, u, sbj, collect, comment, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimeLineRepo_ChangeSubjectCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeSubjectCollection'
type TimeLineRepo_ChangeSubjectCollection_Call struct {
	*mock.Call
}

// ChangeSubjectCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - u auth.Auth
//   - sbj model.Subject
//   - collect model.SubjectCollection
//   - comment string
//   - rate uint8
func (_e *TimeLineRepo_Expecter) ChangeSubjectCollection(ctx interface{}, u interface{}, sbj interface{}, collect interface{}, comment interface{}, rate interface{}) *TimeLineRepo_ChangeSubjectCollection_Call {
	return &TimeLineRepo_ChangeSubjectCollection_Call{Call: _e.mock.On("ChangeSubjectCollection", ctx, u, sbj, collect, comment, rate)}
}

func (_c *TimeLineRepo_ChangeSubjectCollection_Call) Run(run func(ctx context.Context, u auth.Auth, sbj model.Subject, collect model.SubjectCollection, comment string, rate uint8)) *TimeLineRepo_ChangeSubjectCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.Auth), args[2].(model.Subject), args[3].(model.SubjectCollection), args[4].(string), args[5].(uint8))
	})
	return _c
}

func (_c *TimeLineRepo_ChangeSubjectCollection_Call) Return(_a0 error) *TimeLineRepo_ChangeSubjectCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTimeLineRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeLineRepo creates a new instance of TimeLineRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeLineRepo(t mockConstructorTestingTNewTimeLineRepo) *TimeLineRepo {
	mock := &TimeLineRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
