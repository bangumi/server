// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewRedisCache creates a new instance of RedisCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisCache {
	mock := &RedisCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RedisCache is an autogenerated mock type for the RedisCache type
type RedisCache struct {
	mock.Mock
}

type RedisCache_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisCache) EXPECT() *RedisCache_Expecter {
	return &RedisCache_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type RedisCache
func (_mock *RedisCache) Del(ctx context.Context, keys ...string) error {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RedisCache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type RedisCache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx
//   - keys
func (_e *RedisCache_Expecter) Del(ctx interface{}, keys ...interface{}) *RedisCache_Del_Call {
	return &RedisCache_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *RedisCache_Del_Call) Run(run func(ctx context.Context, keys ...string)) *RedisCache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RedisCache_Del_Call) Return(err error) *RedisCache_Del_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RedisCache_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) error) *RedisCache_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type RedisCache
func (_mock *RedisCache) Get(ctx context.Context, key string, value any) (bool, error) {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) (bool, error)); ok {
		return returnFunc(ctx, key, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) bool); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = returnFunc(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RedisCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RedisCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *RedisCache_Expecter) Get(ctx interface{}, key interface{}, value interface{}) *RedisCache_Get_Call {
	return &RedisCache_Get_Call{Call: _e.mock.On("Get", ctx, key, value)}
}

func (_c *RedisCache_Get_Call) Run(run func(ctx context.Context, key string, value any)) *RedisCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *RedisCache_Get_Call) Return(b bool, err error) *RedisCache_Get_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *RedisCache_Get_Call) RunAndReturn(run func(ctx context.Context, key string, value any) (bool, error)) *RedisCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// MGet provides a mock function for the type RedisCache
func (_mock *RedisCache) MGet(ctx context.Context, key []string, result any) error {
	ret := _mock.Called(ctx, key, result)

	if len(ret) == 0 {
		panic("no return value specified for MGet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, any) error); ok {
		r0 = returnFunc(ctx, key, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RedisCache_MGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGet'
type RedisCache_MGet_Call struct {
	*mock.Call
}

// MGet is a helper method to define mock.On call
//   - ctx
//   - key
//   - result
func (_e *RedisCache_Expecter) MGet(ctx interface{}, key interface{}, result interface{}) *RedisCache_MGet_Call {
	return &RedisCache_MGet_Call{Call: _e.mock.On("MGet", ctx, key, result)}
}

func (_c *RedisCache_MGet_Call) Run(run func(ctx context.Context, key []string, result any)) *RedisCache_MGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(any))
	})
	return _c
}

func (_c *RedisCache_MGet_Call) Return(err error) *RedisCache_MGet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RedisCache_MGet_Call) RunAndReturn(run func(ctx context.Context, key []string, result any) error) *RedisCache_MGet_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type RedisCache
func (_mock *RedisCache) Set(ctx context.Context, key string, value any, ttl time.Duration) error {
	ret := _mock.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RedisCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
//   - ttl
func (_e *RedisCache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *RedisCache_Set_Call {
	return &RedisCache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, ttl)}
}

func (_c *RedisCache_Set_Call) Run(run func(ctx context.Context, key string, value any, ttl time.Duration)) *RedisCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(time.Duration))
	})
	return _c
}

func (_c *RedisCache_Set_Call) Return(err error) *RedisCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RedisCache_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, ttl time.Duration) error) *RedisCache_Set_Call {
	_c.Call.Return(run)
	return _c
}
