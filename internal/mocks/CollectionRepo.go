// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// CollectionRepo is an autogenerated mock type for the CollectionRepo type
type CollectionRepo struct {
	mock.Mock
}

type CollectionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionRepo) EXPECT() *CollectionRepo_Expecter {
	return &CollectionRepo_Expecter{mock: &_m.Mock}
}

// CountCollections provides a mock function with given fields: ctx, userID, subjectType, collectionType, showPrivate
func (_m *CollectionRepo) CountCollections(ctx context.Context, userID model.UserID, subjectType uint8, collectionType uint8, showPrivate bool) (int64, error) {
	ret := _m.Called(ctx, userID, subjectType, collectionType, showPrivate)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, uint8, uint8, bool) int64); ok {
		r0 = rf(ctx, userID, subjectType, collectionType, showPrivate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, uint8, uint8, bool) error); ok {
		r1 = rf(ctx, userID, subjectType, collectionType, showPrivate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionRepo_CountCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountCollections'
type CollectionRepo_CountCollections_Call struct {
	*mock.Call
}

// CountCollections is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - subjectType uint8
//  - collectionType uint8
//  - showPrivate bool
func (_e *CollectionRepo_Expecter) CountCollections(ctx interface{}, userID interface{}, subjectType interface{}, collectionType interface{}, showPrivate interface{}) *CollectionRepo_CountCollections_Call {
	return &CollectionRepo_CountCollections_Call{Call: _e.mock.On("CountCollections", ctx, userID, subjectType, collectionType, showPrivate)}
}

func (_c *CollectionRepo_CountCollections_Call) Run(run func(ctx context.Context, userID model.UserID, subjectType uint8, collectionType uint8, showPrivate bool)) *CollectionRepo_CountCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(uint8), args[3].(uint8), args[4].(bool))
	})
	return _c
}

func (_c *CollectionRepo_CountCollections_Call) Return(_a0 int64, _a1 error) *CollectionRepo_CountCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetCollection provides a mock function with given fields: ctx, userID, subjectID
func (_m *CollectionRepo) GetCollection(ctx context.Context, userID model.UserID, subjectID model.SubjectID) (model.SubjectCollection, error) {
	ret := _m.Called(ctx, userID, subjectID)

	var r0 model.SubjectCollection
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID) model.SubjectCollection); ok {
		r0 = rf(ctx, userID, subjectID)
	} else {
		r0 = ret.Get(0).(model.SubjectCollection)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectID) error); ok {
		r1 = rf(ctx, userID, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionRepo_GetCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollection'
type CollectionRepo_GetCollection_Call struct {
	*mock.Call
}

// GetCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - subjectID model.SubjectID
func (_e *CollectionRepo_Expecter) GetCollection(ctx interface{}, userID interface{}, subjectID interface{}) *CollectionRepo_GetCollection_Call {
	return &CollectionRepo_GetCollection_Call{Call: _e.mock.On("GetCollection", ctx, userID, subjectID)}
}

func (_c *CollectionRepo_GetCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID)) *CollectionRepo_GetCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.SubjectID))
	})
	return _c
}

func (_c *CollectionRepo_GetCollection_Call) Return(_a0 model.SubjectCollection, _a1 error) *CollectionRepo_GetCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListCollections provides a mock function with given fields: ctx, userID, subjectType, collectionType, showPrivate, limit, offset
func (_m *CollectionRepo) ListCollections(ctx context.Context, userID model.UserID, subjectType uint8, collectionType uint8, showPrivate bool, limit int, offset int) ([]model.SubjectCollection, error) {
	ret := _m.Called(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)

	var r0 []model.SubjectCollection
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, uint8, uint8, bool, int, int) []model.SubjectCollection); ok {
		r0 = rf(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SubjectCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, uint8, uint8, bool, int, int) error); ok {
		r1 = rf(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionRepo_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type CollectionRepo_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - subjectType uint8
//  - collectionType uint8
//  - showPrivate bool
//  - limit int
//  - offset int
func (_e *CollectionRepo_Expecter) ListCollections(ctx interface{}, userID interface{}, subjectType interface{}, collectionType interface{}, showPrivate interface{}, limit interface{}, offset interface{}) *CollectionRepo_ListCollections_Call {
	return &CollectionRepo_ListCollections_Call{Call: _e.mock.On("ListCollections", ctx, userID, subjectType, collectionType, showPrivate, limit, offset)}
}

func (_c *CollectionRepo_ListCollections_Call) Run(run func(ctx context.Context, userID model.UserID, subjectType uint8, collectionType uint8, showPrivate bool, limit int, offset int)) *CollectionRepo_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(uint8), args[3].(uint8), args[4].(bool), args[5].(int), args[6].(int))
	})
	return _c
}

func (_c *CollectionRepo_ListCollections_Call) Return(_a0 []model.SubjectCollection, _a1 error) *CollectionRepo_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateCollection provides a mock function with given fields: ctx, userID, subjectID, data
func (_m *CollectionRepo) UpdateCollection(ctx context.Context, userID model.UserID, subjectID model.SubjectID, data model.SubjectCollectionUpdate) error {
	ret := _m.Called(ctx, userID, subjectID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID, model.SubjectCollectionUpdate) error); ok {
		r0 = rf(ctx, userID, subjectID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectionRepo_UpdateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCollection'
type CollectionRepo_UpdateCollection_Call struct {
	*mock.Call
}

// UpdateCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - subjectID model.SubjectID
//  - data model.SubjectCollectionUpdate
func (_e *CollectionRepo_Expecter) UpdateCollection(ctx interface{}, userID interface{}, subjectID interface{}, data interface{}) *CollectionRepo_UpdateCollection_Call {
	return &CollectionRepo_UpdateCollection_Call{Call: _e.mock.On("UpdateCollection", ctx, userID, subjectID, data)}
}

func (_c *CollectionRepo_UpdateCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID, data model.SubjectCollectionUpdate)) *CollectionRepo_UpdateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.SubjectID), args[3].(model.SubjectCollectionUpdate))
	})
	return _c
}

func (_c *CollectionRepo_UpdateCollection_Call) Return(_a0 error) *CollectionRepo_UpdateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCollectionRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionRepo creates a new instance of CollectionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionRepo(t mockConstructorTestingTNewCollectionRepo) *CollectionRepo {
	mock := &CollectionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
