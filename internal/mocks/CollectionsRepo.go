// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/bangumi/server/dal/query"
	"github.com/bangumi/server/internal/collections"
	"github.com/bangumi/server/internal/collections/domain/collection"
	"github.com/bangumi/server/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewCollectionsRepo creates a new instance of CollectionsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionsRepo {
	mock := &CollectionsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CollectionsRepo is an autogenerated mock type for the Repo type
type CollectionsRepo struct {
	mock.Mock
}

type CollectionsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionsRepo) EXPECT() *CollectionsRepo_Expecter {
	return &CollectionsRepo_Expecter{mock: &_m.Mock}
}

// AddPersonCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) AddPersonCollection(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) error {
	ret := _mock.Called(ctx, userID, cat, targetID)

	if len(ret) == 0 {
		panic("no return value specified for AddPersonCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, model.PersonID) error); ok {
		r0 = returnFunc(ctx, userID, cat, targetID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CollectionsRepo_AddPersonCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPersonCollection'
type CollectionsRepo_AddPersonCollection_Call struct {
	*mock.Call
}

// AddPersonCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - cat collection.PersonCollectCategory
//   - targetID model.PersonID
func (_e *CollectionsRepo_Expecter) AddPersonCollection(ctx interface{}, userID interface{}, cat interface{}, targetID interface{}) *CollectionsRepo_AddPersonCollection_Call {
	return &CollectionsRepo_AddPersonCollection_Call{Call: _e.mock.On("AddPersonCollection", ctx, userID, cat, targetID)}
}

func (_c *CollectionsRepo_AddPersonCollection_Call) Run(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID)) *CollectionsRepo_AddPersonCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 collection.PersonCollectCategory
		if args[2] != nil {
			arg2 = args[2].(collection.PersonCollectCategory)
		}
		var arg3 model.PersonID
		if args[3] != nil {
			arg3 = args[3].(model.PersonID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *CollectionsRepo_AddPersonCollection_Call) Return(err error) *CollectionsRepo_AddPersonCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CollectionsRepo_AddPersonCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) error) *CollectionsRepo_AddPersonCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CountPersonCollections provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) CountPersonCollections(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory) (int64, error) {
	ret := _mock.Called(ctx, userID, cat)

	if len(ret) == 0 {
		panic("no return value specified for CountPersonCollections")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory) (int64, error)); ok {
		return returnFunc(ctx, userID, cat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory) int64); ok {
		r0 = returnFunc(ctx, userID, cat)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, collection.PersonCollectCategory) error); ok {
		r1 = returnFunc(ctx, userID, cat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_CountPersonCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountPersonCollections'
type CollectionsRepo_CountPersonCollections_Call struct {
	*mock.Call
}

// CountPersonCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - cat collection.PersonCollectCategory
func (_e *CollectionsRepo_Expecter) CountPersonCollections(ctx interface{}, userID interface{}, cat interface{}) *CollectionsRepo_CountPersonCollections_Call {
	return &CollectionsRepo_CountPersonCollections_Call{Call: _e.mock.On("CountPersonCollections", ctx, userID, cat)}
}

func (_c *CollectionsRepo_CountPersonCollections_Call) Run(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory)) *CollectionsRepo_CountPersonCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 collection.PersonCollectCategory
		if args[2] != nil {
			arg2 = args[2].(collection.PersonCollectCategory)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CollectionsRepo_CountPersonCollections_Call) Return(n int64, err error) *CollectionsRepo_CountPersonCollections_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *CollectionsRepo_CountPersonCollections_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory) (int64, error)) *CollectionsRepo_CountPersonCollections_Call {
	_c.Call.Return(run)
	return _c
}

// CountSubjectCollections provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) CountSubjectCollections(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool) (int64, error) {
	ret := _mock.Called(ctx, userID, subjectType, collectionType, showPrivate)

	if len(ret) == 0 {
		panic("no return value specified for CountSubjectCollections")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool) (int64, error)); ok {
		return returnFunc(ctx, userID, subjectType, collectionType, showPrivate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool) int64); ok {
		r0 = returnFunc(ctx, userID, subjectType, collectionType, showPrivate)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool) error); ok {
		r1 = returnFunc(ctx, userID, subjectType, collectionType, showPrivate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_CountSubjectCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSubjectCollections'
type CollectionsRepo_CountSubjectCollections_Call struct {
	*mock.Call
}

// CountSubjectCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subjectType model.SubjectType
//   - collectionType collection.SubjectCollection
//   - showPrivate bool
func (_e *CollectionsRepo_Expecter) CountSubjectCollections(ctx interface{}, userID interface{}, subjectType interface{}, collectionType interface{}, showPrivate interface{}) *CollectionsRepo_CountSubjectCollections_Call {
	return &CollectionsRepo_CountSubjectCollections_Call{Call: _e.mock.On("CountSubjectCollections", ctx, userID, subjectType, collectionType, showPrivate)}
}

func (_c *CollectionsRepo_CountSubjectCollections_Call) Run(run func(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool)) *CollectionsRepo_CountSubjectCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.SubjectType
		if args[2] != nil {
			arg2 = args[2].(model.SubjectType)
		}
		var arg3 collection.SubjectCollection
		if args[3] != nil {
			arg3 = args[3].(collection.SubjectCollection)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *CollectionsRepo_CountSubjectCollections_Call) Return(n int64, err error) *CollectionsRepo_CountSubjectCollections_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *CollectionsRepo_CountSubjectCollections_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool) (int64, error)) *CollectionsRepo_CountSubjectCollections_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) GetPersonCollection(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) (collection.UserPersonCollection, error) {
	ret := _mock.Called(ctx, userID, cat, targetID)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonCollection")
	}

	var r0 collection.UserPersonCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, model.PersonID) (collection.UserPersonCollection, error)); ok {
		return returnFunc(ctx, userID, cat, targetID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, model.PersonID) collection.UserPersonCollection); ok {
		r0 = returnFunc(ctx, userID, cat, targetID)
	} else {
		r0 = ret.Get(0).(collection.UserPersonCollection)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, collection.PersonCollectCategory, model.PersonID) error); ok {
		r1 = returnFunc(ctx, userID, cat, targetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_GetPersonCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonCollection'
type CollectionsRepo_GetPersonCollection_Call struct {
	*mock.Call
}

// GetPersonCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - cat collection.PersonCollectCategory
//   - targetID model.PersonID
func (_e *CollectionsRepo_Expecter) GetPersonCollection(ctx interface{}, userID interface{}, cat interface{}, targetID interface{}) *CollectionsRepo_GetPersonCollection_Call {
	return &CollectionsRepo_GetPersonCollection_Call{Call: _e.mock.On("GetPersonCollection", ctx, userID, cat, targetID)}
}

func (_c *CollectionsRepo_GetPersonCollection_Call) Run(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID)) *CollectionsRepo_GetPersonCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 collection.PersonCollectCategory
		if args[2] != nil {
			arg2 = args[2].(collection.PersonCollectCategory)
		}
		var arg3 model.PersonID
		if args[3] != nil {
			arg3 = args[3].(model.PersonID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *CollectionsRepo_GetPersonCollection_Call) Return(userPersonCollection collection.UserPersonCollection, err error) *CollectionsRepo_GetPersonCollection_Call {
	_c.Call.Return(userPersonCollection, err)
	return _c
}

func (_c *CollectionsRepo_GetPersonCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) (collection.UserPersonCollection, error)) *CollectionsRepo_GetPersonCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubjectCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) GetSubjectCollection(ctx context.Context, userID model.UserID, subjectID model.SubjectID) (collection.UserSubjectCollection, error) {
	ret := _mock.Called(ctx, userID, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubjectCollection")
	}

	var r0 collection.UserSubjectCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID) (collection.UserSubjectCollection, error)); ok {
		return returnFunc(ctx, userID, subjectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID) collection.UserSubjectCollection); ok {
		r0 = returnFunc(ctx, userID, subjectID)
	} else {
		r0 = ret.Get(0).(collection.UserSubjectCollection)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectID) error); ok {
		r1 = returnFunc(ctx, userID, subjectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_GetSubjectCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubjectCollection'
type CollectionsRepo_GetSubjectCollection_Call struct {
	*mock.Call
}

// GetSubjectCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subjectID model.SubjectID
func (_e *CollectionsRepo_Expecter) GetSubjectCollection(ctx interface{}, userID interface{}, subjectID interface{}) *CollectionsRepo_GetSubjectCollection_Call {
	return &CollectionsRepo_GetSubjectCollection_Call{Call: _e.mock.On("GetSubjectCollection", ctx, userID, subjectID)}
}

func (_c *CollectionsRepo_GetSubjectCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID)) *CollectionsRepo_GetSubjectCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.SubjectID
		if args[2] != nil {
			arg2 = args[2].(model.SubjectID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CollectionsRepo_GetSubjectCollection_Call) Return(userSubjectCollection collection.UserSubjectCollection, err error) *CollectionsRepo_GetSubjectCollection_Call {
	_c.Call.Return(userSubjectCollection, err)
	return _c
}

func (_c *CollectionsRepo_GetSubjectCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID) (collection.UserSubjectCollection, error)) *CollectionsRepo_GetSubjectCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubjectEpisodesCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) GetSubjectEpisodesCollection(ctx context.Context, userID model.UserID, subjectID model.SubjectID) (collection.UserSubjectEpisodesCollection, error) {
	ret := _mock.Called(ctx, userID, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubjectEpisodesCollection")
	}

	var r0 collection.UserSubjectEpisodesCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID) (collection.UserSubjectEpisodesCollection, error)); ok {
		return returnFunc(ctx, userID, subjectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID) collection.UserSubjectEpisodesCollection); ok {
		r0 = returnFunc(ctx, userID, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(collection.UserSubjectEpisodesCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectID) error); ok {
		r1 = returnFunc(ctx, userID, subjectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_GetSubjectEpisodesCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubjectEpisodesCollection'
type CollectionsRepo_GetSubjectEpisodesCollection_Call struct {
	*mock.Call
}

// GetSubjectEpisodesCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subjectID model.SubjectID
func (_e *CollectionsRepo_Expecter) GetSubjectEpisodesCollection(ctx interface{}, userID interface{}, subjectID interface{}) *CollectionsRepo_GetSubjectEpisodesCollection_Call {
	return &CollectionsRepo_GetSubjectEpisodesCollection_Call{Call: _e.mock.On("GetSubjectEpisodesCollection", ctx, userID, subjectID)}
}

func (_c *CollectionsRepo_GetSubjectEpisodesCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID)) *CollectionsRepo_GetSubjectEpisodesCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.SubjectID
		if args[2] != nil {
			arg2 = args[2].(model.SubjectID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CollectionsRepo_GetSubjectEpisodesCollection_Call) Return(userSubjectEpisodesCollection collection.UserSubjectEpisodesCollection, err error) *CollectionsRepo_GetSubjectEpisodesCollection_Call {
	_c.Call.Return(userSubjectEpisodesCollection, err)
	return _c
}

func (_c *CollectionsRepo_GetSubjectEpisodesCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID) (collection.UserSubjectEpisodesCollection, error)) *CollectionsRepo_GetSubjectEpisodesCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ListPersonCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) ListPersonCollection(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, limit int, offset int) ([]collection.UserPersonCollection, error) {
	ret := _mock.Called(ctx, userID, cat, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListPersonCollection")
	}

	var r0 []collection.UserPersonCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, int, int) ([]collection.UserPersonCollection, error)); ok {
		return returnFunc(ctx, userID, cat, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, int, int) []collection.UserPersonCollection); ok {
		r0 = returnFunc(ctx, userID, cat, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collection.UserPersonCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, collection.PersonCollectCategory, int, int) error); ok {
		r1 = returnFunc(ctx, userID, cat, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_ListPersonCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPersonCollection'
type CollectionsRepo_ListPersonCollection_Call struct {
	*mock.Call
}

// ListPersonCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - cat collection.PersonCollectCategory
//   - limit int
//   - offset int
func (_e *CollectionsRepo_Expecter) ListPersonCollection(ctx interface{}, userID interface{}, cat interface{}, limit interface{}, offset interface{}) *CollectionsRepo_ListPersonCollection_Call {
	return &CollectionsRepo_ListPersonCollection_Call{Call: _e.mock.On("ListPersonCollection", ctx, userID, cat, limit, offset)}
}

func (_c *CollectionsRepo_ListPersonCollection_Call) Run(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, limit int, offset int)) *CollectionsRepo_ListPersonCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 collection.PersonCollectCategory
		if args[2] != nil {
			arg2 = args[2].(collection.PersonCollectCategory)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *CollectionsRepo_ListPersonCollection_Call) Return(userPersonCollections []collection.UserPersonCollection, err error) *CollectionsRepo_ListPersonCollection_Call {
	_c.Call.Return(userPersonCollections, err)
	return _c
}

func (_c *CollectionsRepo_ListPersonCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, limit int, offset int) ([]collection.UserPersonCollection, error)) *CollectionsRepo_ListPersonCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubjectCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) ListSubjectCollection(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool, limit int, offset int) ([]collection.UserSubjectCollection, error) {
	ret := _mock.Called(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListSubjectCollection")
	}

	var r0 []collection.UserSubjectCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool, int, int) ([]collection.UserSubjectCollection, error)); ok {
		return returnFunc(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool, int, int) []collection.UserSubjectCollection); ok {
		r0 = returnFunc(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collection.UserSubjectCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectType, collection.SubjectCollection, bool, int, int) error); ok {
		r1 = returnFunc(ctx, userID, subjectType, collectionType, showPrivate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_ListSubjectCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubjectCollection'
type CollectionsRepo_ListSubjectCollection_Call struct {
	*mock.Call
}

// ListSubjectCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subjectType model.SubjectType
//   - collectionType collection.SubjectCollection
//   - showPrivate bool
//   - limit int
//   - offset int
func (_e *CollectionsRepo_Expecter) ListSubjectCollection(ctx interface{}, userID interface{}, subjectType interface{}, collectionType interface{}, showPrivate interface{}, limit interface{}, offset interface{}) *CollectionsRepo_ListSubjectCollection_Call {
	return &CollectionsRepo_ListSubjectCollection_Call{Call: _e.mock.On("ListSubjectCollection", ctx, userID, subjectType, collectionType, showPrivate, limit, offset)}
}

func (_c *CollectionsRepo_ListSubjectCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool, limit int, offset int)) *CollectionsRepo_ListSubjectCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.SubjectType
		if args[2] != nil {
			arg2 = args[2].(model.SubjectType)
		}
		var arg3 collection.SubjectCollection
		if args[3] != nil {
			arg3 = args[3].(collection.SubjectCollection)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *CollectionsRepo_ListSubjectCollection_Call) Return(userSubjectCollections []collection.UserSubjectCollection, err error) *CollectionsRepo_ListSubjectCollection_Call {
	_c.Call.Return(userSubjectCollections, err)
	return _c
}

func (_c *CollectionsRepo_ListSubjectCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subjectType model.SubjectType, collectionType collection.SubjectCollection, showPrivate bool, limit int, offset int) ([]collection.UserSubjectCollection, error)) *CollectionsRepo_ListSubjectCollection_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePersonCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) RemovePersonCollection(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) error {
	ret := _mock.Called(ctx, userID, cat, targetID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePersonCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, collection.PersonCollectCategory, model.PersonID) error); ok {
		r0 = returnFunc(ctx, userID, cat, targetID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CollectionsRepo_RemovePersonCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePersonCollection'
type CollectionsRepo_RemovePersonCollection_Call struct {
	*mock.Call
}

// RemovePersonCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - cat collection.PersonCollectCategory
//   - targetID model.PersonID
func (_e *CollectionsRepo_Expecter) RemovePersonCollection(ctx interface{}, userID interface{}, cat interface{}, targetID interface{}) *CollectionsRepo_RemovePersonCollection_Call {
	return &CollectionsRepo_RemovePersonCollection_Call{Call: _e.mock.On("RemovePersonCollection", ctx, userID, cat, targetID)}
}

func (_c *CollectionsRepo_RemovePersonCollection_Call) Run(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID)) *CollectionsRepo_RemovePersonCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 collection.PersonCollectCategory
		if args[2] != nil {
			arg2 = args[2].(collection.PersonCollectCategory)
		}
		var arg3 model.PersonID
		if args[3] != nil {
			arg3 = args[3].(model.PersonID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *CollectionsRepo_RemovePersonCollection_Call) Return(err error) *CollectionsRepo_RemovePersonCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CollectionsRepo_RemovePersonCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, cat collection.PersonCollectCategory, targetID model.PersonID) error) *CollectionsRepo_RemovePersonCollection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEpisodeCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) UpdateEpisodeCollection(ctx context.Context, userID model.UserID, subjectID model.SubjectID, episodeIDs []model.EpisodeID, collection1 collection.EpisodeCollection, at time.Time) (collection.UserSubjectEpisodesCollection, error) {
	ret := _mock.Called(ctx, userID, subjectID, episodeIDs, collection1, at)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEpisodeCollection")
	}

	var r0 collection.UserSubjectEpisodesCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID, []model.EpisodeID, collection.EpisodeCollection, time.Time) (collection.UserSubjectEpisodesCollection, error)); ok {
		return returnFunc(ctx, userID, subjectID, episodeIDs, collection1, at)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID, []model.EpisodeID, collection.EpisodeCollection, time.Time) collection.UserSubjectEpisodesCollection); ok {
		r0 = returnFunc(ctx, userID, subjectID, episodeIDs, collection1, at)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(collection.UserSubjectEpisodesCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, model.SubjectID, []model.EpisodeID, collection.EpisodeCollection, time.Time) error); ok {
		r1 = returnFunc(ctx, userID, subjectID, episodeIDs, collection1, at)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CollectionsRepo_UpdateEpisodeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEpisodeCollection'
type CollectionsRepo_UpdateEpisodeCollection_Call struct {
	*mock.Call
}

// UpdateEpisodeCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subjectID model.SubjectID
//   - episodeIDs []model.EpisodeID
//   - collection1 collection.EpisodeCollection
//   - at time.Time
func (_e *CollectionsRepo_Expecter) UpdateEpisodeCollection(ctx interface{}, userID interface{}, subjectID interface{}, episodeIDs interface{}, collection1 interface{}, at interface{}) *CollectionsRepo_UpdateEpisodeCollection_Call {
	return &CollectionsRepo_UpdateEpisodeCollection_Call{Call: _e.mock.On("UpdateEpisodeCollection", ctx, userID, subjectID, episodeIDs, collection1, at)}
}

func (_c *CollectionsRepo_UpdateEpisodeCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID, episodeIDs []model.EpisodeID, collection1 collection.EpisodeCollection, at time.Time)) *CollectionsRepo_UpdateEpisodeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.SubjectID
		if args[2] != nil {
			arg2 = args[2].(model.SubjectID)
		}
		var arg3 []model.EpisodeID
		if args[3] != nil {
			arg3 = args[3].([]model.EpisodeID)
		}
		var arg4 collection.EpisodeCollection
		if args[4] != nil {
			arg4 = args[4].(collection.EpisodeCollection)
		}
		var arg5 time.Time
		if args[5] != nil {
			arg5 = args[5].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *CollectionsRepo_UpdateEpisodeCollection_Call) Return(userSubjectEpisodesCollection collection.UserSubjectEpisodesCollection, err error) *CollectionsRepo_UpdateEpisodeCollection_Call {
	_c.Call.Return(userSubjectEpisodesCollection, err)
	return _c
}

func (_c *CollectionsRepo_UpdateEpisodeCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID, episodeIDs []model.EpisodeID, collection1 collection.EpisodeCollection, at time.Time) (collection.UserSubjectEpisodesCollection, error)) *CollectionsRepo_UpdateEpisodeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrCreateSubjectCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) UpdateOrCreateSubjectCollection(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error {
	ret := _mock.Called(ctx, userID, subject, at, ip, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreateSubjectCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.Subject, time.Time, string, func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error); ok {
		r0 = returnFunc(ctx, userID, subject, at, ip, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CollectionsRepo_UpdateOrCreateSubjectCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrCreateSubjectCollection'
type CollectionsRepo_UpdateOrCreateSubjectCollection_Call struct {
	*mock.Call
}

// UpdateOrCreateSubjectCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subject model.Subject
//   - at time.Time
//   - ip string
//   - update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)
func (_e *CollectionsRepo_Expecter) UpdateOrCreateSubjectCollection(ctx interface{}, userID interface{}, subject interface{}, at interface{}, ip interface{}, update interface{}) *CollectionsRepo_UpdateOrCreateSubjectCollection_Call {
	return &CollectionsRepo_UpdateOrCreateSubjectCollection_Call{Call: _e.mock.On("UpdateOrCreateSubjectCollection", ctx, userID, subject, at, ip, update)}
}

func (_c *CollectionsRepo_UpdateOrCreateSubjectCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error))) *CollectionsRepo_UpdateOrCreateSubjectCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.Subject
		if args[2] != nil {
			arg2 = args[2].(model.Subject)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)
		if args[5] != nil {
			arg5 = args[5].(func(ctx context.Context, s *collection.Subject) (*collection.Subject, error))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *CollectionsRepo_UpdateOrCreateSubjectCollection_Call) Return(err error) *CollectionsRepo_UpdateOrCreateSubjectCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CollectionsRepo_UpdateOrCreateSubjectCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error) *CollectionsRepo_UpdateOrCreateSubjectCollection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubjectCollection provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) UpdateSubjectCollection(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error {
	ret := _mock.Called(ctx, userID, subject, at, ip, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubjectCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, model.Subject, time.Time, string, func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error); ok {
		r0 = returnFunc(ctx, userID, subject, at, ip, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CollectionsRepo_UpdateSubjectCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubjectCollection'
type CollectionsRepo_UpdateSubjectCollection_Call struct {
	*mock.Call
}

// UpdateSubjectCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - subject model.Subject
//   - at time.Time
//   - ip string
//   - update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)
func (_e *CollectionsRepo_Expecter) UpdateSubjectCollection(ctx interface{}, userID interface{}, subject interface{}, at interface{}, ip interface{}, update interface{}) *CollectionsRepo_UpdateSubjectCollection_Call {
	return &CollectionsRepo_UpdateSubjectCollection_Call{Call: _e.mock.On("UpdateSubjectCollection", ctx, userID, subject, at, ip, update)}
}

func (_c *CollectionsRepo_UpdateSubjectCollection_Call) Run(run func(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error))) *CollectionsRepo_UpdateSubjectCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 model.Subject
		if args[2] != nil {
			arg2 = args[2].(model.Subject)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)
		if args[5] != nil {
			arg5 = args[5].(func(ctx context.Context, s *collection.Subject) (*collection.Subject, error))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *CollectionsRepo_UpdateSubjectCollection_Call) Return(err error) *CollectionsRepo_UpdateSubjectCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CollectionsRepo_UpdateSubjectCollection_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, subject model.Subject, at time.Time, ip string, update func(ctx context.Context, s *collection.Subject) (*collection.Subject, error)) error) *CollectionsRepo_UpdateSubjectCollection_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuery provides a mock function for the type CollectionsRepo
func (_mock *CollectionsRepo) WithQuery(query1 *query.Query) collections.Repo {
	ret := _mock.Called(query1)

	if len(ret) == 0 {
		panic("no return value specified for WithQuery")
	}

	var r0 collections.Repo
	if returnFunc, ok := ret.Get(0).(func(*query.Query) collections.Repo); ok {
		r0 = returnFunc(query1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(collections.Repo)
		}
	}
	return r0
}

// CollectionsRepo_WithQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuery'
type CollectionsRepo_WithQuery_Call struct {
	*mock.Call
}

// WithQuery is a helper method to define mock.On call
//   - query1 *query.Query
func (_e *CollectionsRepo_Expecter) WithQuery(query1 interface{}) *CollectionsRepo_WithQuery_Call {
	return &CollectionsRepo_WithQuery_Call{Call: _e.mock.On("WithQuery", query1)}
}

func (_c *CollectionsRepo_WithQuery_Call) Run(run func(query1 *query.Query)) *CollectionsRepo_WithQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *query.Query
		if args[0] != nil {
			arg0 = args[0].(*query.Query)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CollectionsRepo_WithQuery_Call) Return(repo collections.Repo) *CollectionsRepo_WithQuery_Call {
	_c.Call.Return(repo)
	return _c
}

func (_c *CollectionsRepo_WithQuery_Call) RunAndReturn(run func(query1 *query.Query) collections.Repo) *CollectionsRepo_WithQuery_Call {
	_c.Call.Return(run)
	return _c
}
