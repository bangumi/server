// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// CharacterService is an autogenerated mock type for the CharacterService type
type CharacterService struct {
	mock.Mock
}

type CharacterService_Expecter struct {
	mock *mock.Mock
}

func (_m *CharacterService) EXPECT() *CharacterService_Expecter {
	return &CharacterService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *CharacterService) Get(ctx context.Context, id uint32) (model.Character, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Character
	if rf, ok := ret.Get(0).(func(context.Context, uint32) model.Character); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Character)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CharacterService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CharacterService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint32
func (_e *CharacterService_Expecter) Get(ctx interface{}, id interface{}) *CharacterService_Get_Call {
	return &CharacterService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *CharacterService_Get_Call) Run(run func(ctx context.Context, id uint32)) *CharacterService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *CharacterService_Get_Call) Return(_a0 model.Character, _a1 error) *CharacterService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPersonRelated provides a mock function with given fields: ctx, personID
func (_m *CharacterService) GetPersonRelated(ctx context.Context, personID uint32) ([]model.PersonCharacterRelation, error) {
	ret := _m.Called(ctx, personID)

	var r0 []model.PersonCharacterRelation
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.PersonCharacterRelation); ok {
		r0 = rf(ctx, personID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PersonCharacterRelation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, personID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CharacterService_GetPersonRelated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonRelated'
type CharacterService_GetPersonRelated_Call struct {
	*mock.Call
}

// GetPersonRelated is a helper method to define mock.On call
//  - ctx context.Context
//  - personID uint32
func (_e *CharacterService_Expecter) GetPersonRelated(ctx interface{}, personID interface{}) *CharacterService_GetPersonRelated_Call {
	return &CharacterService_GetPersonRelated_Call{Call: _e.mock.On("GetPersonRelated", ctx, personID)}
}

func (_c *CharacterService_GetPersonRelated_Call) Run(run func(ctx context.Context, personID uint32)) *CharacterService_GetPersonRelated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *CharacterService_GetPersonRelated_Call) Return(_a0 []model.PersonCharacterRelation, _a1 error) *CharacterService_GetPersonRelated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSubjectRelated provides a mock function with given fields: ctx, subjectID
func (_m *CharacterService) GetSubjectRelated(ctx context.Context, subjectID uint32) ([]model.SubjectCharacterRelation, error) {
	ret := _m.Called(ctx, subjectID)

	var r0 []model.SubjectCharacterRelation
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.SubjectCharacterRelation); ok {
		r0 = rf(ctx, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SubjectCharacterRelation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CharacterService_GetSubjectRelated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubjectRelated'
type CharacterService_GetSubjectRelated_Call struct {
	*mock.Call
}

// GetSubjectRelated is a helper method to define mock.On call
//  - ctx context.Context
//  - subjectID uint32
func (_e *CharacterService_Expecter) GetSubjectRelated(ctx interface{}, subjectID interface{}) *CharacterService_GetSubjectRelated_Call {
	return &CharacterService_GetSubjectRelated_Call{Call: _e.mock.On("GetSubjectRelated", ctx, subjectID)}
}

func (_c *CharacterService_GetSubjectRelated_Call) Run(run func(ctx context.Context, subjectID uint32)) *CharacterService_GetSubjectRelated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *CharacterService_GetSubjectRelated_Call) Return(_a0 []model.SubjectCharacterRelation, _a1 error) *CharacterService_GetSubjectRelated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewCharacterServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCharacterService creates a new instance of CharacterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCharacterService(t NewCharacterServiceT) *CharacterService {
	mock := &CharacterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
