// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	oauth "github.com/bangumi/server/internal/oauth"
	mock "github.com/stretchr/testify/mock"
)

// OAuthManger is an autogenerated mock type for the Manager type
type OAuthManger struct {
	mock.Mock
}

type OAuthManger_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuthManger) EXPECT() *OAuthManger_Expecter {
	return &OAuthManger_Expecter{mock: &_m.Mock}
}

// GetClientByID provides a mock function with given fields: ctx, clientIDs
func (_m *OAuthManger) GetClientByID(ctx context.Context, clientIDs ...string) (map[string]oauth.Client, error) {
	_va := make([]interface{}, len(clientIDs))
	for _i := range clientIDs {
		_va[_i] = clientIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]oauth.Client
	if rf, ok := ret.Get(0).(func(context.Context, ...string) map[string]oauth.Client); ok {
		r0 = rf(ctx, clientIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]oauth.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, clientIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuthManger_GetClientByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByID'
type OAuthManger_GetClientByID_Call struct {
	*mock.Call
}

// GetClientByID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientIDs ...string
func (_e *OAuthManger_Expecter) GetClientByID(ctx interface{}, clientIDs ...interface{}) *OAuthManger_GetClientByID_Call {
	return &OAuthManger_GetClientByID_Call{Call: _e.mock.On("GetClientByID",
		append([]interface{}{ctx}, clientIDs...)...)}
}

func (_c *OAuthManger_GetClientByID_Call) Run(run func(ctx context.Context, clientIDs ...string)) *OAuthManger_GetClientByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *OAuthManger_GetClientByID_Call) Return(_a0 map[string]oauth.Client, _a1 error) *OAuthManger_GetClientByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewOAuthManger interface {
	mock.TestingT
	Cleanup(func())
}

// NewOAuthManger creates a new instance of OAuthManger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOAuthManger(t mockConstructorTestingTNewOAuthManger) *OAuthManger {
	mock := &OAuthManger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
