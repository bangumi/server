// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bangumi/server/internal/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// CommentRepo is an autogenerated mock type for the CommentRepo type
type CommentRepo struct {
	mock.Mock
}

type CommentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepo) EXPECT() *CommentRepo_Expecter {
	return &CommentRepo_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, commentType, id
func (_m *CommentRepo) Count(ctx context.Context, commentType domain.CommentType, id model.TopicID) (int64, error) {
	ret := _m.Called(ctx, commentType, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, domain.CommentType, model.TopicID) int64); ok {
		r0 = rf(ctx, commentType, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CommentType, model.TopicID) error); ok {
		r1 = rf(ctx, commentType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type CommentRepo_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
//  - commentType domain.CommentType
//  - id model.TopicID
func (_e *CommentRepo_Expecter) Count(ctx interface{}, commentType interface{}, id interface{}) *CommentRepo_Count_Call {
	return &CommentRepo_Count_Call{Call: _e.mock.On("Count", ctx, commentType, id)}
}

func (_c *CommentRepo_Count_Call) Run(run func(ctx context.Context, commentType domain.CommentType, id model.TopicID)) *CommentRepo_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CommentType), args[2].(model.TopicID))
	})
	return _c
}

func (_c *CommentRepo_Count_Call) Return(_a0 int64, _a1 error) *CommentRepo_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, commentType, id
func (_m *CommentRepo) Get(ctx context.Context, commentType domain.CommentType, id model.CommentID) (model.Comment, error) {
	ret := _m.Called(ctx, commentType, id)

	var r0 model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, domain.CommentType, model.CommentID) model.Comment); ok {
		r0 = rf(ctx, commentType, id)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CommentType, model.CommentID) error); ok {
		r1 = rf(ctx, commentType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CommentRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - commentType domain.CommentType
//  - id model.CommentID
func (_e *CommentRepo_Expecter) Get(ctx interface{}, commentType interface{}, id interface{}) *CommentRepo_Get_Call {
	return &CommentRepo_Get_Call{Call: _e.mock.On("Get", ctx, commentType, id)}
}

func (_c *CommentRepo_Get_Call) Run(run func(ctx context.Context, commentType domain.CommentType, id model.CommentID)) *CommentRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CommentType), args[2].(model.CommentID))
	})
	return _c
}

func (_c *CommentRepo_Get_Call) Return(_a0 model.Comment, _a1 error) *CommentRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, commentType, id, limit, offset
func (_m *CommentRepo) List(ctx context.Context, commentType domain.CommentType, id model.TopicID, limit int, offset int) ([]model.Comment, error) {
	ret := _m.Called(ctx, commentType, id, limit, offset)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, domain.CommentType, model.TopicID, int, int) []model.Comment); ok {
		r0 = rf(ctx, commentType, id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CommentType, model.TopicID, int, int) error); ok {
		r1 = rf(ctx, commentType, id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CommentRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - commentType domain.CommentType
//  - id model.TopicID
//  - limit int
//  - offset int
func (_e *CommentRepo_Expecter) List(ctx interface{}, commentType interface{}, id interface{}, limit interface{}, offset interface{}) *CommentRepo_List_Call {
	return &CommentRepo_List_Call{Call: _e.mock.On("List", ctx, commentType, id, limit, offset)}
}

func (_c *CommentRepo_List_Call) Run(run func(ctx context.Context, commentType domain.CommentType, id model.TopicID, limit int, offset int)) *CommentRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CommentType), args[2].(model.TopicID), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *CommentRepo_List_Call) Return(_a0 []model.Comment, _a1 error) *CommentRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCommentRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepo creates a new instance of CommentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepo(t mockConstructorTestingTNewCommentRepo) *CommentRepo {
	mock := &CommentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
