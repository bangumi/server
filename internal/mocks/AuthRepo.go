// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/bangumi/server/internal/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthRepo creates a new instance of AuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepo {
	mock := &AuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthRepo is an autogenerated mock type for the Repo type
type AuthRepo struct {
	mock.Mock
}

type AuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepo) EXPECT() *AuthRepo_Expecter {
	return &AuthRepo_Expecter{mock: &_m.Mock}
}

// GetByToken provides a mock function for the type AuthRepo
func (_mock *AuthRepo) GetByToken(ctx context.Context, token string) (auth.UserInfo, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 auth.UserInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (auth.UserInfo, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) auth.UserInfo); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(auth.UserInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthRepo_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type AuthRepo_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *AuthRepo_Expecter) GetByToken(ctx interface{}, token interface{}) *AuthRepo_GetByToken_Call {
	return &AuthRepo_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *AuthRepo_GetByToken_Call) Run(run func(ctx context.Context, token string)) *AuthRepo_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthRepo_GetByToken_Call) Return(userInfo auth.UserInfo, err error) *AuthRepo_GetByToken_Call {
	_c.Call.Return(userInfo, err)
	return _c
}

func (_c *AuthRepo_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (auth.UserInfo, error)) *AuthRepo_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermission provides a mock function for the type AuthRepo
func (_mock *AuthRepo) GetPermission(ctx context.Context, groupID uint8) (auth.Permission, error) {
	ret := _mock.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 auth.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint8) (auth.Permission, error)); ok {
		return returnFunc(ctx, groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint8) auth.Permission); ok {
		r0 = returnFunc(ctx, groupID)
	} else {
		r0 = ret.Get(0).(auth.Permission)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint8) error); ok {
		r1 = returnFunc(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthRepo_GetPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermission'
type AuthRepo_GetPermission_Call struct {
	*mock.Call
}

// GetPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uint8
func (_e *AuthRepo_Expecter) GetPermission(ctx interface{}, groupID interface{}) *AuthRepo_GetPermission_Call {
	return &AuthRepo_GetPermission_Call{Call: _e.mock.On("GetPermission", ctx, groupID)}
}

func (_c *AuthRepo_GetPermission_Call) Run(run func(ctx context.Context, groupID uint8)) *AuthRepo_GetPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint8
		if args[1] != nil {
			arg1 = args[1].(uint8)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthRepo_GetPermission_Call) Return(permission auth.Permission, err error) *AuthRepo_GetPermission_Call {
	_c.Call.Return(permission, err)
	return _c
}

func (_c *AuthRepo_GetPermission_Call) RunAndReturn(run func(ctx context.Context, groupID uint8) (auth.Permission, error)) *AuthRepo_GetPermission_Call {
	_c.Call.Return(run)
	return _c
}
