// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bangumi/server/internal/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// TopicRepo is an autogenerated mock type for the TopicRepo type
type TopicRepo struct {
	mock.Mock
}

type TopicRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TopicRepo) EXPECT() *TopicRepo_Expecter {
	return &TopicRepo_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, topicType, id, statuses
func (_m *TopicRepo) Count(ctx context.Context, topicType domain.TopicType, id uint32, statuses []model.TopicStatus) (int64, error) {
	ret := _m.Called(ctx, topicType, id, statuses)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, domain.TopicType, uint32, []model.TopicStatus) int64); ok {
		r0 = rf(ctx, topicType, id, statuses)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.TopicType, uint32, []model.TopicStatus) error); ok {
		r1 = rf(ctx, topicType, id, statuses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRepo_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type TopicRepo_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
//  - topicType domain.TopicType
//  - id uint32
//  - statuses []model.TopicStatus
func (_e *TopicRepo_Expecter) Count(ctx interface{}, topicType interface{}, id interface{}, statuses interface{}) *TopicRepo_Count_Call {
	return &TopicRepo_Count_Call{Call: _e.mock.On("Count", ctx, topicType, id, statuses)}
}

func (_c *TopicRepo_Count_Call) Run(run func(ctx context.Context, topicType domain.TopicType, id uint32, statuses []model.TopicStatus)) *TopicRepo_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TopicType), args[2].(uint32), args[3].([]model.TopicStatus))
	})
	return _c
}

func (_c *TopicRepo_Count_Call) Return(_a0 int64, _a1 error) *TopicRepo_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, topicType, id
func (_m *TopicRepo) Get(ctx context.Context, topicType domain.TopicType, id model.TopicID) (model.Topic, error) {
	ret := _m.Called(ctx, topicType, id)

	var r0 model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, domain.TopicType, model.TopicID) model.Topic); ok {
		r0 = rf(ctx, topicType, id)
	} else {
		r0 = ret.Get(0).(model.Topic)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.TopicType, model.TopicID) error); ok {
		r1 = rf(ctx, topicType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TopicRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - topicType domain.TopicType
//  - id model.TopicID
func (_e *TopicRepo_Expecter) Get(ctx interface{}, topicType interface{}, id interface{}) *TopicRepo_Get_Call {
	return &TopicRepo_Get_Call{Call: _e.mock.On("Get", ctx, topicType, id)}
}

func (_c *TopicRepo_Get_Call) Run(run func(ctx context.Context, topicType domain.TopicType, id model.TopicID)) *TopicRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TopicType), args[2].(model.TopicID))
	})
	return _c
}

func (_c *TopicRepo_Get_Call) Return(_a0 model.Topic, _a1 error) *TopicRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, topicType, id, statuses, limit, offset
func (_m *TopicRepo) List(ctx context.Context, topicType domain.TopicType, id uint32, statuses []model.TopicStatus, limit int, offset int) ([]model.Topic, error) {
	ret := _m.Called(ctx, topicType, id, statuses, limit, offset)

	var r0 []model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, domain.TopicType, uint32, []model.TopicStatus, int, int) []model.Topic); ok {
		r0 = rf(ctx, topicType, id, statuses, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.TopicType, uint32, []model.TopicStatus, int, int) error); ok {
		r1 = rf(ctx, topicType, id, statuses, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type TopicRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - topicType domain.TopicType
//  - id uint32
//  - statuses []model.TopicStatus
//  - limit int
//  - offset int
func (_e *TopicRepo_Expecter) List(ctx interface{}, topicType interface{}, id interface{}, statuses interface{}, limit interface{}, offset interface{}) *TopicRepo_List_Call {
	return &TopicRepo_List_Call{Call: _e.mock.On("List", ctx, topicType, id, statuses, limit, offset)}
}

func (_c *TopicRepo_List_Call) Run(run func(ctx context.Context, topicType domain.TopicType, id uint32, statuses []model.TopicStatus, limit int, offset int)) *TopicRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TopicType), args[2].(uint32), args[3].([]model.TopicStatus), args[4].(int), args[5].(int))
	})
	return _c
}

func (_c *TopicRepo_List_Call) Return(_a0 []model.Topic, _a1 error) *TopicRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTopicRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicRepo creates a new instance of TopicRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicRepo(t mockConstructorTestingTNewTopicRepo) *TopicRepo {
	mock := &TopicRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
