// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"

	time "time"
)

// TimeLineService is an autogenerated mock type for the TimeLineService type
type TimeLineService struct {
	mock.Mock
}

type TimeLineService_Expecter struct {
	mock *mock.Mock
}

func (_m *TimeLineService) EXPECT() *TimeLineService_Expecter {
	return &TimeLineService_Expecter{mock: &_m.Mock}
}

// EpisodeCollect provides a mock function with given fields: ctx, userID, episodeID, collectionAction, at
func (_m *TimeLineService) EpisodeCollect(ctx context.Context, userID model.UserID, episodeID model.EpisodeID, collectionAction uint8, at time.Time) error {
	ret := _m.Called(ctx, userID, episodeID, collectionAction, at)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.EpisodeID, uint8, time.Time) error); ok {
		r0 = rf(ctx, userID, episodeID, collectionAction, at)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimeLineService_EpisodeCollect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpisodeCollect'
type TimeLineService_EpisodeCollect_Call struct {
	*mock.Call
}

// EpisodeCollect is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - episodeID model.EpisodeID
//  - collectionAction uint8
//  - at time.Time
func (_e *TimeLineService_Expecter) EpisodeCollect(ctx interface{}, userID interface{}, episodeID interface{}, collectionAction interface{}, at interface{}) *TimeLineService_EpisodeCollect_Call {
	return &TimeLineService_EpisodeCollect_Call{Call: _e.mock.On("EpisodeCollect", ctx, userID, episodeID, collectionAction, at)}
}

func (_c *TimeLineService_EpisodeCollect_Call) Run(run func(ctx context.Context, userID model.UserID, episodeID model.EpisodeID, collectionAction uint8, at time.Time)) *TimeLineService_EpisodeCollect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.EpisodeID), args[3].(uint8), args[4].(time.Time))
	})
	return _c
}

func (_c *TimeLineService_EpisodeCollect_Call) Return(_a0 error) *TimeLineService_EpisodeCollect_Call {
	_c.Call.Return(_a0)
	return _c
}

// SubjectCollect provides a mock function with given fields: ctx, userID, subjectID, collectionAction, comment, at
func (_m *TimeLineService) SubjectCollect(ctx context.Context, userID model.UserID, subjectID model.SubjectID, collectionAction uint8, comment string, at time.Time) error {
	ret := _m.Called(ctx, userID, subjectID, collectionAction, comment, at)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, model.SubjectID, uint8, string, time.Time) error); ok {
		r0 = rf(ctx, userID, subjectID, collectionAction, comment, at)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimeLineService_SubjectCollect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubjectCollect'
type TimeLineService_SubjectCollect_Call struct {
	*mock.Call
}

// SubjectCollect is a helper method to define mock.On call
//  - ctx context.Context
//  - userID model.UserID
//  - subjectID model.SubjectID
//  - collectionAction uint8
//  - comment string
//  - at time.Time
func (_e *TimeLineService_Expecter) SubjectCollect(ctx interface{}, userID interface{}, subjectID interface{}, collectionAction interface{}, comment interface{}, at interface{}) *TimeLineService_SubjectCollect_Call {
	return &TimeLineService_SubjectCollect_Call{Call: _e.mock.On("SubjectCollect", ctx, userID, subjectID, collectionAction, comment, at)}
}

func (_c *TimeLineService_SubjectCollect_Call) Run(run func(ctx context.Context, userID model.UserID, subjectID model.SubjectID, collectionAction uint8, comment string, at time.Time)) *TimeLineService_SubjectCollect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID), args[2].(model.SubjectID), args[3].(uint8), args[4].(string), args[5].(time.Time))
	})
	return _c
}

func (_c *TimeLineService_SubjectCollect_Call) Return(_a0 error) *TimeLineService_SubjectCollect_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTimeLineService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeLineService creates a new instance of TimeLineService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeLineService(t mockConstructorTestingTNewTimeLineService) *TimeLineService {
	mock := &TimeLineService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
