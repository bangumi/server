// Code generated by mockery v2.12.2. DO NOT EDIT.

package session

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, key, userID, regTime
func (_m *MockRepo) Create(ctx context.Context, key string, userID uint32, regTime time.Time) (Session, error) {
	ret := _m.Called(ctx, key, userID, regTime)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, time.Time) Session); ok {
		r0 = rf(ctx, key, userID, regTime)
	} else {
		r0 = ret.Get(0).(Session)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint32, time.Time) error); ok {
		r1 = rf(ctx, key, userID, regTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - userID uint32
//  - regTime time.Time
func (_e *MockRepo_Expecter) Create(ctx interface{}, key interface{}, userID interface{}, regTime interface{}) *MockRepo_Create_Call {
	return &MockRepo_Create_Call{Call: _e.mock.On("Create", ctx, key, userID, regTime)}
}

func (_c *MockRepo_Create_Call) Run(run func(ctx context.Context, key string, userID uint32, regTime time.Time)) *MockRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepo_Create_Call) Return(_a0 Session, _a1 error) *MockRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockRepo) Get(ctx context.Context, key string) (persistSession, error) {
	ret := _m.Called(ctx, key)

	var r0 persistSession
	if rf, ok := ret.Get(0).(func(context.Context, string) persistSession); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(persistSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRepo_Expecter) Get(ctx interface{}, key interface{}) *MockRepo_Get_Call {
	return &MockRepo_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRepo_Get_Call) Run(run func(ctx context.Context, key string)) *MockRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepo_Get_Call) Return(_a0 persistSession, _a1 error) *MockRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Revoke provides a mock function with given fields: ctx, key
func (_m *MockRepo) Revoke(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockRepo_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRepo_Expecter) Revoke(ctx interface{}, key interface{}) *MockRepo_Revoke_Call {
	return &MockRepo_Revoke_Call{Call: _e.mock.On("Revoke", ctx, key)}
}

func (_c *MockRepo_Revoke_Call) Run(run func(ctx context.Context, key string)) *MockRepo_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepo_Revoke_Call) Return(_a0 error) *MockRepo_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

// RevokeUser provides a mock function with given fields: ctx, userID
func (_m *MockRepo) RevokeUser(ctx context.Context, userID uint32) ([]string, error) {
	ret := _m.Called(ctx, userID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_RevokeUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeUser'
type MockRepo_RevokeUser_Call struct {
	*mock.Call
}

// RevokeUser is a helper method to define mock.On call
//  - ctx context.Context
//  - userID uint32
func (_e *MockRepo_Expecter) RevokeUser(ctx interface{}, userID interface{}) *MockRepo_RevokeUser_Call {
	return &MockRepo_RevokeUser_Call{Call: _e.mock.On("RevokeUser", ctx, userID)}
}

func (_c *MockRepo_RevokeUser_Call) Run(run func(ctx context.Context, userID uint32)) *MockRepo_RevokeUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockRepo_RevokeUser_Call) Return(keys []string, err error) *MockRepo_RevokeUser_Call {
	_c.Call.Return(keys, err)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepo(t testing.TB) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
