// SPDX-License-Identifier: AGPL-3.0-only
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>

// SPDX-License-Identifier: AGPL-3.0-only
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>

package main

import (
	"bytes"
	"os"
	"os/exec"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
)

//nolint:gochecknoglobals
var queueTemplate = `
// code generated by "./internal/cmd/gen/generic", DON'T EDIT IT.

package generic

import (
	"database/sql/driver"

	"github.com/bangumi/server/internal/model"
)

{{ range . }}
{{ $s := splitList "." . }}

func {{ index $s 1 }}ToValuerSlice(a []{{.}}) []driver.Valuer {
	b := make([]driver.Valuer, len(a))
	for i := range a {
		b[i] = a[i]
	}

	return b
}

{{ end }}
`

func main() {
	var types = []string{
		"model.SubjectID", "model.PersonID", "model.UserID", "model.CharacterID", "model.EpisodeID", "model.GroupID",
	}

	t := template.Must(template.New("queue").Funcs(sprig.HermeticTxtFuncMap()).Parse(queueTemplate))

	var b = bytes.NewBuffer(nil)
	err := t.Execute(b, types)
	if err != nil {
		panic(err)
	}

	var fs = "internal/model/generic/valuer.go"
	var content = strings.TrimSpace(b.String())

	err = os.WriteFile(fs, []byte(content), 0600) //nolint:gomnd
	if err != nil {
		panic(err)
	}

	err = exec.Command("go", "fmt", fs).Run()
	if err != nil {
		panic(err)
	}
}
