// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newGroup(db *gorm.DB) group {
	_group := group{}

	_group.groupDo.UseDB(db)
	_group.groupDo.UseModel(&dao.Group{})

	tableName := _group.groupDo.TableName()
	_group.ALL = field.NewAsterisk(tableName)
	_group.ID = field.NewField(tableName, "grp_id")
	_group.Cat = field.NewUint16(tableName, "grp_cat")
	_group.Name = field.NewString(tableName, "grp_name")
	_group.Title = field.NewString(tableName, "grp_title")
	_group.Icon = field.NewString(tableName, "grp_icon")
	_group.CreatorID = field.NewField(tableName, "grp_creator")
	_group.Topics = field.NewUint32(tableName, "grp_topics")
	_group.Posts = field.NewUint32(tableName, "grp_posts")
	_group.Members = field.NewUint32(tableName, "grp_members")
	_group.Description = field.NewString(tableName, "grp_desc")
	_group.LastPostedTime = field.NewUint32(tableName, "grp_lastpost")
	_group.CreatedTime = field.NewUint32(tableName, "grp_builddate")
	_group.Accessible = field.NewUint8(tableName, "grp_accessible")
	_group.Nsfw = field.NewBool(tableName, "grp_nsfw")

	_group.fillFieldMap()

	return _group
}

type group struct {
	groupDo groupDo

	ALL            field.Asterisk
	ID             field.Field
	Cat            field.Uint16
	Name           field.String
	Title          field.String
	Icon           field.String
	CreatorID      field.Field
	Topics         field.Uint32
	Posts          field.Uint32
	Members        field.Uint32
	Description    field.String
	LastPostedTime field.Uint32 // 目前永远是0
	CreatedTime    field.Uint32
	Accessible     field.Uint8 // 可访问性
	Nsfw           field.Bool

	fieldMap map[string]field.Expr
}

func (g group) Table(newTableName string) *group {
	g.groupDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g group) As(alias string) *group {
	g.groupDo.DO = *(g.groupDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *group) updateTableName(table string) *group {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewField(table, "grp_id")
	g.Cat = field.NewUint16(table, "grp_cat")
	g.Name = field.NewString(table, "grp_name")
	g.Title = field.NewString(table, "grp_title")
	g.Icon = field.NewString(table, "grp_icon")
	g.CreatorID = field.NewField(table, "grp_creator")
	g.Topics = field.NewUint32(table, "grp_topics")
	g.Posts = field.NewUint32(table, "grp_posts")
	g.Members = field.NewUint32(table, "grp_members")
	g.Description = field.NewString(table, "grp_desc")
	g.LastPostedTime = field.NewUint32(table, "grp_lastpost")
	g.CreatedTime = field.NewUint32(table, "grp_builddate")
	g.Accessible = field.NewUint8(table, "grp_accessible")
	g.Nsfw = field.NewBool(table, "grp_nsfw")

	g.fillFieldMap()

	return g
}

func (g *group) WithContext(ctx context.Context) *groupDo { return g.groupDo.WithContext(ctx) }

func (g group) TableName() string { return g.groupDo.TableName() }

func (g group) Alias() string { return g.groupDo.Alias() }

func (g *group) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *group) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 14)
	g.fieldMap["grp_id"] = g.ID
	g.fieldMap["grp_cat"] = g.Cat
	g.fieldMap["grp_name"] = g.Name
	g.fieldMap["grp_title"] = g.Title
	g.fieldMap["grp_icon"] = g.Icon
	g.fieldMap["grp_creator"] = g.CreatorID
	g.fieldMap["grp_topics"] = g.Topics
	g.fieldMap["grp_posts"] = g.Posts
	g.fieldMap["grp_members"] = g.Members
	g.fieldMap["grp_desc"] = g.Description
	g.fieldMap["grp_lastpost"] = g.LastPostedTime
	g.fieldMap["grp_builddate"] = g.CreatedTime
	g.fieldMap["grp_accessible"] = g.Accessible
	g.fieldMap["grp_nsfw"] = g.Nsfw
}

func (g group) clone(db *gorm.DB) group {
	g.groupDo.ReplaceDB(db)
	return g
}

type groupDo struct{ gen.DO }

func (g groupDo) Debug() *groupDo {
	return g.withDO(g.DO.Debug())
}

func (g groupDo) WithContext(ctx context.Context) *groupDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupDo) ReadDB() *groupDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupDo) WriteDB() *groupDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupDo) Clauses(conds ...clause.Expression) *groupDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupDo) Returning(value interface{}, columns ...string) *groupDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupDo) Not(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupDo) Or(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupDo) Select(conds ...field.Expr) *groupDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupDo) Where(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *groupDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupDo) Order(conds ...field.Expr) *groupDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupDo) Distinct(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupDo) Omit(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupDo) Join(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupDo) Group(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupDo) Having(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupDo) Limit(limit int) *groupDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupDo) Offset(offset int) *groupDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupDo) Unscoped() *groupDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupDo) Create(values ...*dao.Group) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupDo) CreateInBatches(values []*dao.Group, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupDo) Save(values ...*dao.Group) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupDo) First() (*dao.Group, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Group), nil
	}
}

func (g groupDo) Take() (*dao.Group, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Group), nil
	}
}

func (g groupDo) Last() (*dao.Group, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Group), nil
	}
}

func (g groupDo) Find() ([]*dao.Group, error) {
	result, err := g.DO.Find()
	return result.([]*dao.Group), err
}

func (g groupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.Group, err error) {
	buf := make([]*dao.Group, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupDo) FindInBatches(result *[]*dao.Group, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupDo) Attrs(attrs ...field.AssignExpr) *groupDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupDo) Assign(attrs ...field.AssignExpr) *groupDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupDo) Joins(fields ...field.RelationField) *groupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupDo) Preload(fields ...field.RelationField) *groupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupDo) FirstOrInit() (*dao.Group, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Group), nil
	}
}

func (g groupDo) FirstOrCreate() (*dao.Group, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Group), nil
	}
}

func (g groupDo) FindByPage(offset int, limit int) (result []*dao.Group, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupDo) Delete(models ...*dao.Group) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupDo) withDO(do gen.Dao) *groupDo {
	g.DO = *do.(*gen.DO)
	return g
}
