// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newCharacterComment(db *gorm.DB) characterComment {
	_characterComment := characterComment{}

	_characterComment.characterCommentDo.UseDB(db)
	_characterComment.characterCommentDo.UseModel(&dao.CharacterComment{})

	tableName := _characterComment.characterCommentDo.TableName()
	_characterComment.ALL = field.NewAsterisk(tableName)
	_characterComment.ID = field.NewUint32(tableName, "crt_pst_id")
	_characterComment.TopicID = field.NewUint32(tableName, "crt_pst_mid")
	_characterComment.UID = field.NewUint32(tableName, "crt_pst_uid")
	_characterComment.Related = field.NewUint32(tableName, "crt_pst_related")
	_characterComment.CreatedTime = field.NewUint32(tableName, "crt_pst_dateline")
	_characterComment.Content = field.NewString(tableName, "crt_pst_content")

	_characterComment.fillFieldMap()

	return _characterComment
}

type characterComment struct {
	characterCommentDo characterCommentDo

	ALL         field.Asterisk
	ID          field.Uint32
	TopicID     field.Uint32 // 关联人物ID
	UID         field.Uint32
	Related     field.Uint32
	CreatedTime field.Uint32
	Content     field.String

	fieldMap map[string]field.Expr
}

func (c characterComment) Table(newTableName string) *characterComment {
	c.characterCommentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c characterComment) As(alias string) *characterComment {
	c.characterCommentDo.DO = *(c.characterCommentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *characterComment) updateTableName(table string) *characterComment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "crt_pst_id")
	c.TopicID = field.NewUint32(table, "crt_pst_mid")
	c.UID = field.NewUint32(table, "crt_pst_uid")
	c.Related = field.NewUint32(table, "crt_pst_related")
	c.CreatedTime = field.NewUint32(table, "crt_pst_dateline")
	c.Content = field.NewString(table, "crt_pst_content")

	c.fillFieldMap()

	return c
}

func (c *characterComment) WithContext(ctx context.Context) *characterCommentDo {
	return c.characterCommentDo.WithContext(ctx)
}

func (c characterComment) TableName() string { return c.characterCommentDo.TableName() }

func (c characterComment) Alias() string { return c.characterCommentDo.Alias() }

func (c *characterComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *characterComment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["crt_pst_id"] = c.ID
	c.fieldMap["crt_pst_mid"] = c.TopicID
	c.fieldMap["crt_pst_uid"] = c.UID
	c.fieldMap["crt_pst_related"] = c.Related
	c.fieldMap["crt_pst_dateline"] = c.CreatedTime
	c.fieldMap["crt_pst_content"] = c.Content
}

func (c characterComment) clone(db *gorm.DB) characterComment {
	c.characterCommentDo.ReplaceDB(db)
	return c
}

type characterCommentDo struct{ gen.DO }

func (c characterCommentDo) Debug() *characterCommentDo {
	return c.withDO(c.DO.Debug())
}

func (c characterCommentDo) WithContext(ctx context.Context) *characterCommentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c characterCommentDo) ReadDB() *characterCommentDo {
	return c.Clauses(dbresolver.Read)
}

func (c characterCommentDo) WriteDB() *characterCommentDo {
	return c.Clauses(dbresolver.Write)
}

func (c characterCommentDo) Clauses(conds ...clause.Expression) *characterCommentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c characterCommentDo) Returning(value interface{}, columns ...string) *characterCommentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c characterCommentDo) Not(conds ...gen.Condition) *characterCommentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c characterCommentDo) Or(conds ...gen.Condition) *characterCommentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c characterCommentDo) Select(conds ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c characterCommentDo) Where(conds ...gen.Condition) *characterCommentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c characterCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *characterCommentDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c characterCommentDo) Order(conds ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c characterCommentDo) Distinct(cols ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c characterCommentDo) Omit(cols ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c characterCommentDo) Join(table schema.Tabler, on ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c characterCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c characterCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c characterCommentDo) Group(cols ...field.Expr) *characterCommentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c characterCommentDo) Having(conds ...gen.Condition) *characterCommentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c characterCommentDo) Limit(limit int) *characterCommentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c characterCommentDo) Offset(offset int) *characterCommentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c characterCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *characterCommentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c characterCommentDo) Unscoped() *characterCommentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c characterCommentDo) Create(values ...*dao.CharacterComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c characterCommentDo) CreateInBatches(values []*dao.CharacterComment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c characterCommentDo) Save(values ...*dao.CharacterComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c characterCommentDo) First() (*dao.CharacterComment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.CharacterComment), nil
	}
}

func (c characterCommentDo) Take() (*dao.CharacterComment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.CharacterComment), nil
	}
}

func (c characterCommentDo) Last() (*dao.CharacterComment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.CharacterComment), nil
	}
}

func (c characterCommentDo) Find() ([]*dao.CharacterComment, error) {
	result, err := c.DO.Find()
	return result.([]*dao.CharacterComment), err
}

func (c characterCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.CharacterComment, err error) {
	buf := make([]*dao.CharacterComment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c characterCommentDo) FindInBatches(result *[]*dao.CharacterComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c characterCommentDo) Attrs(attrs ...field.AssignExpr) *characterCommentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c characterCommentDo) Assign(attrs ...field.AssignExpr) *characterCommentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c characterCommentDo) Joins(fields ...field.RelationField) *characterCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c characterCommentDo) Preload(fields ...field.RelationField) *characterCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c characterCommentDo) FirstOrInit() (*dao.CharacterComment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.CharacterComment), nil
	}
}

func (c characterCommentDo) FirstOrCreate() (*dao.CharacterComment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.CharacterComment), nil
	}
}

func (c characterCommentDo) FindByPage(offset int, limit int) (result []*dao.CharacterComment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c characterCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c characterCommentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c characterCommentDo) Delete(models ...*dao.CharacterComment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *characterCommentDo) withDO(do gen.Dao) *characterCommentDo {
	c.DO = *do.(*gen.DO)
	return c
}
