// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newGroupTopic(db *gorm.DB) groupTopic {
	_groupTopic := groupTopic{}

	_groupTopic.groupTopicDo.UseDB(db)
	_groupTopic.groupTopicDo.UseModel(&dao.GroupTopic{})

	tableName := _groupTopic.groupTopicDo.TableName()
	_groupTopic.ALL = field.NewAsterisk(tableName)
	_groupTopic.ID = field.NewUint32(tableName, "grp_tpc_id")
	_groupTopic.GroupID = field.NewUint32(tableName, "grp_tpc_gid")
	_groupTopic.UID = field.NewUint32(tableName, "grp_tpc_uid")
	_groupTopic.Title = field.NewString(tableName, "grp_tpc_title")
	_groupTopic.CreatedTime = field.NewUint32(tableName, "grp_tpc_dateline")
	_groupTopic.UpdatedTime = field.NewUint32(tableName, "grp_tpc_lastpost")
	_groupTopic.Replies = field.NewUint32(tableName, "grp_tpc_replies")
	_groupTopic.State = field.NewUint8(tableName, "grp_tpc_state")
	_groupTopic.Display = field.NewUint8(tableName, "grp_tpc_display")

	_groupTopic.fillFieldMap()

	return _groupTopic
}

type groupTopic struct {
	groupTopicDo groupTopicDo

	ALL         field.Asterisk
	ID          field.Uint32
	GroupID     field.Uint32
	UID         field.Uint32
	Title       field.String
	CreatedTime field.Uint32
	UpdatedTime field.Uint32
	Replies     field.Uint32
	State       field.Uint8
	Display     field.Uint8

	fieldMap map[string]field.Expr
}

func (g groupTopic) Table(newTableName string) *groupTopic {
	g.groupTopicDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupTopic) As(alias string) *groupTopic {
	g.groupTopicDo.DO = *(g.groupTopicDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupTopic) updateTableName(table string) *groupTopic {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "grp_tpc_id")
	g.GroupID = field.NewUint32(table, "grp_tpc_gid")
	g.UID = field.NewUint32(table, "grp_tpc_uid")
	g.Title = field.NewString(table, "grp_tpc_title")
	g.CreatedTime = field.NewUint32(table, "grp_tpc_dateline")
	g.UpdatedTime = field.NewUint32(table, "grp_tpc_lastpost")
	g.Replies = field.NewUint32(table, "grp_tpc_replies")
	g.State = field.NewUint8(table, "grp_tpc_state")
	g.Display = field.NewUint8(table, "grp_tpc_display")

	g.fillFieldMap()

	return g
}

func (g *groupTopic) WithContext(ctx context.Context) *groupTopicDo {
	return g.groupTopicDo.WithContext(ctx)
}

func (g groupTopic) TableName() string { return g.groupTopicDo.TableName() }

func (g groupTopic) Alias() string { return g.groupTopicDo.Alias() }

func (g *groupTopic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupTopic) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["grp_tpc_id"] = g.ID
	g.fieldMap["grp_tpc_gid"] = g.GroupID
	g.fieldMap["grp_tpc_uid"] = g.UID
	g.fieldMap["grp_tpc_title"] = g.Title
	g.fieldMap["grp_tpc_dateline"] = g.CreatedTime
	g.fieldMap["grp_tpc_lastpost"] = g.UpdatedTime
	g.fieldMap["grp_tpc_replies"] = g.Replies
	g.fieldMap["grp_tpc_state"] = g.State
	g.fieldMap["grp_tpc_display"] = g.Display
}

func (g groupTopic) clone(db *gorm.DB) groupTopic {
	g.groupTopicDo.ReplaceDB(db)
	return g
}

type groupTopicDo struct{ gen.DO }

func (g groupTopicDo) Debug() *groupTopicDo {
	return g.withDO(g.DO.Debug())
}

func (g groupTopicDo) WithContext(ctx context.Context) *groupTopicDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupTopicDo) ReadDB() *groupTopicDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupTopicDo) WriteDB() *groupTopicDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupTopicDo) Clauses(conds ...clause.Expression) *groupTopicDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupTopicDo) Returning(value interface{}, columns ...string) *groupTopicDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupTopicDo) Not(conds ...gen.Condition) *groupTopicDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupTopicDo) Or(conds ...gen.Condition) *groupTopicDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupTopicDo) Select(conds ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupTopicDo) Where(conds ...gen.Condition) *groupTopicDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupTopicDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *groupTopicDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupTopicDo) Order(conds ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupTopicDo) Distinct(cols ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupTopicDo) Omit(cols ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupTopicDo) Join(table schema.Tabler, on ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupTopicDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupTopicDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupTopicDo) Group(cols ...field.Expr) *groupTopicDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupTopicDo) Having(conds ...gen.Condition) *groupTopicDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupTopicDo) Limit(limit int) *groupTopicDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupTopicDo) Offset(offset int) *groupTopicDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupTopicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupTopicDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupTopicDo) Unscoped() *groupTopicDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupTopicDo) Create(values ...*dao.GroupTopic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupTopicDo) CreateInBatches(values []*dao.GroupTopic, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupTopicDo) Save(values ...*dao.GroupTopic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupTopicDo) First() (*dao.GroupTopic, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.GroupTopic), nil
	}
}

func (g groupTopicDo) Take() (*dao.GroupTopic, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.GroupTopic), nil
	}
}

func (g groupTopicDo) Last() (*dao.GroupTopic, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.GroupTopic), nil
	}
}

func (g groupTopicDo) Find() ([]*dao.GroupTopic, error) {
	result, err := g.DO.Find()
	return result.([]*dao.GroupTopic), err
}

func (g groupTopicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.GroupTopic, err error) {
	buf := make([]*dao.GroupTopic, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupTopicDo) FindInBatches(result *[]*dao.GroupTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupTopicDo) Attrs(attrs ...field.AssignExpr) *groupTopicDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupTopicDo) Assign(attrs ...field.AssignExpr) *groupTopicDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupTopicDo) Joins(fields ...field.RelationField) *groupTopicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupTopicDo) Preload(fields ...field.RelationField) *groupTopicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupTopicDo) FirstOrInit() (*dao.GroupTopic, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.GroupTopic), nil
	}
}

func (g groupTopicDo) FirstOrCreate() (*dao.GroupTopic, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.GroupTopic), nil
	}
}

func (g groupTopicDo) FindByPage(offset int, limit int) (result []*dao.GroupTopic, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupTopicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupTopicDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupTopicDo) Delete(models ...*dao.GroupTopic) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupTopicDo) withDO(do gen.Dao) *groupTopicDo {
	g.DO = *do.(*gen.DO)
	return g
}
