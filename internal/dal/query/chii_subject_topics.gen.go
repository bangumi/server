// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newSubjectTopic(db *gorm.DB) subjectTopic {
	_subjectTopic := subjectTopic{}

	_subjectTopic.subjectTopicDo.UseDB(db)
	_subjectTopic.subjectTopicDo.UseModel(&dao.SubjectTopic{})

	tableName := _subjectTopic.subjectTopicDo.TableName()
	_subjectTopic.ALL = field.NewAsterisk(tableName)
	_subjectTopic.ID = field.NewUint32(tableName, "sbj_tpc_id")
	_subjectTopic.SubjectID = field.NewUint32(tableName, "sbj_tpc_subject_id")
	_subjectTopic.UID = field.NewUint32(tableName, "sbj_tpc_uid")
	_subjectTopic.Title = field.NewString(tableName, "sbj_tpc_title")
	_subjectTopic.CreatedTime = field.NewUint32(tableName, "sbj_tpc_dateline")
	_subjectTopic.UpdatedTime = field.NewUint32(tableName, "sbj_tpc_lastpost")
	_subjectTopic.Replies = field.NewUint32(tableName, "sbj_tpc_replies")
	_subjectTopic.State = field.NewUint8(tableName, "sbj_tpc_state")
	_subjectTopic.Display = field.NewUint8(tableName, "sbj_tpc_display")

	_subjectTopic.fillFieldMap()

	return _subjectTopic
}

type subjectTopic struct {
	subjectTopicDo subjectTopicDo

	ALL         field.Asterisk
	ID          field.Uint32
	SubjectID   field.Uint32
	UID         field.Uint32
	Title       field.String
	CreatedTime field.Uint32
	UpdatedTime field.Uint32
	Replies     field.Uint32
	State       field.Uint8
	Display     field.Uint8

	fieldMap map[string]field.Expr
}

func (s subjectTopic) Table(newTableName string) *subjectTopic {
	s.subjectTopicDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subjectTopic) As(alias string) *subjectTopic {
	s.subjectTopicDo.DO = *(s.subjectTopicDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subjectTopic) updateTableName(table string) *subjectTopic {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "sbj_tpc_id")
	s.SubjectID = field.NewUint32(table, "sbj_tpc_subject_id")
	s.UID = field.NewUint32(table, "sbj_tpc_uid")
	s.Title = field.NewString(table, "sbj_tpc_title")
	s.CreatedTime = field.NewUint32(table, "sbj_tpc_dateline")
	s.UpdatedTime = field.NewUint32(table, "sbj_tpc_lastpost")
	s.Replies = field.NewUint32(table, "sbj_tpc_replies")
	s.State = field.NewUint8(table, "sbj_tpc_state")
	s.Display = field.NewUint8(table, "sbj_tpc_display")

	s.fillFieldMap()

	return s
}

func (s *subjectTopic) WithContext(ctx context.Context) *subjectTopicDo {
	return s.subjectTopicDo.WithContext(ctx)
}

func (s subjectTopic) TableName() string { return s.subjectTopicDo.TableName() }

func (s subjectTopic) Alias() string { return s.subjectTopicDo.Alias() }

func (s *subjectTopic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subjectTopic) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["sbj_tpc_id"] = s.ID
	s.fieldMap["sbj_tpc_subject_id"] = s.SubjectID
	s.fieldMap["sbj_tpc_uid"] = s.UID
	s.fieldMap["sbj_tpc_title"] = s.Title
	s.fieldMap["sbj_tpc_dateline"] = s.CreatedTime
	s.fieldMap["sbj_tpc_lastpost"] = s.UpdatedTime
	s.fieldMap["sbj_tpc_replies"] = s.Replies
	s.fieldMap["sbj_tpc_state"] = s.State
	s.fieldMap["sbj_tpc_display"] = s.Display
}

func (s subjectTopic) clone(db *gorm.DB) subjectTopic {
	s.subjectTopicDo.ReplaceDB(db)
	return s
}

type subjectTopicDo struct{ gen.DO }

func (s subjectTopicDo) Debug() *subjectTopicDo {
	return s.withDO(s.DO.Debug())
}

func (s subjectTopicDo) WithContext(ctx context.Context) *subjectTopicDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subjectTopicDo) ReadDB() *subjectTopicDo {
	return s.Clauses(dbresolver.Read)
}

func (s subjectTopicDo) WriteDB() *subjectTopicDo {
	return s.Clauses(dbresolver.Write)
}

func (s subjectTopicDo) Clauses(conds ...clause.Expression) *subjectTopicDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subjectTopicDo) Returning(value interface{}, columns ...string) *subjectTopicDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subjectTopicDo) Not(conds ...gen.Condition) *subjectTopicDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subjectTopicDo) Or(conds ...gen.Condition) *subjectTopicDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subjectTopicDo) Select(conds ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subjectTopicDo) Where(conds ...gen.Condition) *subjectTopicDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subjectTopicDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *subjectTopicDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s subjectTopicDo) Order(conds ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subjectTopicDo) Distinct(cols ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subjectTopicDo) Omit(cols ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subjectTopicDo) Join(table schema.Tabler, on ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subjectTopicDo) LeftJoin(table schema.Tabler, on ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subjectTopicDo) RightJoin(table schema.Tabler, on ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subjectTopicDo) Group(cols ...field.Expr) *subjectTopicDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subjectTopicDo) Having(conds ...gen.Condition) *subjectTopicDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subjectTopicDo) Limit(limit int) *subjectTopicDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subjectTopicDo) Offset(offset int) *subjectTopicDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subjectTopicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *subjectTopicDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subjectTopicDo) Unscoped() *subjectTopicDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subjectTopicDo) Create(values ...*dao.SubjectTopic) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subjectTopicDo) CreateInBatches(values []*dao.SubjectTopic, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subjectTopicDo) Save(values ...*dao.SubjectTopic) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subjectTopicDo) First() (*dao.SubjectTopic, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.SubjectTopic), nil
	}
}

func (s subjectTopicDo) Take() (*dao.SubjectTopic, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.SubjectTopic), nil
	}
}

func (s subjectTopicDo) Last() (*dao.SubjectTopic, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.SubjectTopic), nil
	}
}

func (s subjectTopicDo) Find() ([]*dao.SubjectTopic, error) {
	result, err := s.DO.Find()
	return result.([]*dao.SubjectTopic), err
}

func (s subjectTopicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.SubjectTopic, err error) {
	buf := make([]*dao.SubjectTopic, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subjectTopicDo) FindInBatches(result *[]*dao.SubjectTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subjectTopicDo) Attrs(attrs ...field.AssignExpr) *subjectTopicDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subjectTopicDo) Assign(attrs ...field.AssignExpr) *subjectTopicDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subjectTopicDo) Joins(fields ...field.RelationField) *subjectTopicDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subjectTopicDo) Preload(fields ...field.RelationField) *subjectTopicDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subjectTopicDo) FirstOrInit() (*dao.SubjectTopic, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.SubjectTopic), nil
	}
}

func (s subjectTopicDo) FirstOrCreate() (*dao.SubjectTopic, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.SubjectTopic), nil
	}
}

func (s subjectTopicDo) FindByPage(offset int, limit int) (result []*dao.SubjectTopic, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subjectTopicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subjectTopicDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subjectTopicDo) Delete(models ...*dao.SubjectTopic) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subjectTopicDo) withDO(do gen.Dao) *subjectTopicDo {
	s.DO = *do.(*gen.DO)
	return s
}
