// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newPersonComment(db *gorm.DB) personComment {
	_personComment := personComment{}

	_personComment.personCommentDo.UseDB(db)
	_personComment.personCommentDo.UseModel(&dao.PersonComment{})

	tableName := _personComment.personCommentDo.TableName()
	_personComment.ALL = field.NewAsterisk(tableName)
	_personComment.ID = field.NewUint32(tableName, "prsn_pst_id")
	_personComment.TopicID = field.NewUint32(tableName, "prsn_pst_mid")
	_personComment.UID = field.NewUint32(tableName, "prsn_pst_uid")
	_personComment.Related = field.NewUint32(tableName, "prsn_pst_related")
	_personComment.CreatedTime = field.NewUint32(tableName, "prsn_pst_dateline")
	_personComment.Content = field.NewString(tableName, "prsn_pst_content")

	_personComment.fillFieldMap()

	return _personComment
}

type personComment struct {
	personCommentDo personCommentDo

	ALL         field.Asterisk
	ID          field.Uint32
	TopicID     field.Uint32 // 关联人物ID
	UID         field.Uint32
	Related     field.Uint32
	CreatedTime field.Uint32
	Content     field.String

	fieldMap map[string]field.Expr
}

func (p personComment) Table(newTableName string) *personComment {
	p.personCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personComment) As(alias string) *personComment {
	p.personCommentDo.DO = *(p.personCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personComment) updateTableName(table string) *personComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint32(table, "prsn_pst_id")
	p.TopicID = field.NewUint32(table, "prsn_pst_mid")
	p.UID = field.NewUint32(table, "prsn_pst_uid")
	p.Related = field.NewUint32(table, "prsn_pst_related")
	p.CreatedTime = field.NewUint32(table, "prsn_pst_dateline")
	p.Content = field.NewString(table, "prsn_pst_content")

	p.fillFieldMap()

	return p
}

func (p *personComment) WithContext(ctx context.Context) *personCommentDo {
	return p.personCommentDo.WithContext(ctx)
}

func (p personComment) TableName() string { return p.personCommentDo.TableName() }

func (p personComment) Alias() string { return p.personCommentDo.Alias() }

func (p *personComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["prsn_pst_id"] = p.ID
	p.fieldMap["prsn_pst_mid"] = p.TopicID
	p.fieldMap["prsn_pst_uid"] = p.UID
	p.fieldMap["prsn_pst_related"] = p.Related
	p.fieldMap["prsn_pst_dateline"] = p.CreatedTime
	p.fieldMap["prsn_pst_content"] = p.Content
}

func (p personComment) clone(db *gorm.DB) personComment {
	p.personCommentDo.ReplaceDB(db)
	return p
}

type personCommentDo struct{ gen.DO }

func (p personCommentDo) Debug() *personCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p personCommentDo) WithContext(ctx context.Context) *personCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personCommentDo) ReadDB() *personCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p personCommentDo) WriteDB() *personCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p personCommentDo) Clauses(conds ...clause.Expression) *personCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personCommentDo) Returning(value interface{}, columns ...string) *personCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personCommentDo) Not(conds ...gen.Condition) *personCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personCommentDo) Or(conds ...gen.Condition) *personCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personCommentDo) Select(conds ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personCommentDo) Where(conds ...gen.Condition) *personCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *personCommentDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p personCommentDo) Order(conds ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personCommentDo) Distinct(cols ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personCommentDo) Omit(cols ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personCommentDo) Join(table schema.Tabler, on ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personCommentDo) Group(cols ...field.Expr) *personCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personCommentDo) Having(conds ...gen.Condition) *personCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personCommentDo) Limit(limit int) *personCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personCommentDo) Offset(offset int) *personCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *personCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personCommentDo) Unscoped() *personCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personCommentDo) Create(values ...*dao.PersonComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personCommentDo) CreateInBatches(values []*dao.PersonComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personCommentDo) Save(values ...*dao.PersonComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personCommentDo) First() (*dao.PersonComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PersonComment), nil
	}
}

func (p personCommentDo) Take() (*dao.PersonComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PersonComment), nil
	}
}

func (p personCommentDo) Last() (*dao.PersonComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PersonComment), nil
	}
}

func (p personCommentDo) Find() ([]*dao.PersonComment, error) {
	result, err := p.DO.Find()
	return result.([]*dao.PersonComment), err
}

func (p personCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.PersonComment, err error) {
	buf := make([]*dao.PersonComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personCommentDo) FindInBatches(result *[]*dao.PersonComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personCommentDo) Attrs(attrs ...field.AssignExpr) *personCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personCommentDo) Assign(attrs ...field.AssignExpr) *personCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personCommentDo) Joins(fields ...field.RelationField) *personCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personCommentDo) Preload(fields ...field.RelationField) *personCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personCommentDo) FirstOrInit() (*dao.PersonComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PersonComment), nil
	}
}

func (p personCommentDo) FirstOrCreate() (*dao.PersonComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PersonComment), nil
	}
}

func (p personCommentDo) FindByPage(offset int, limit int) (result []*dao.PersonComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personCommentDo) Delete(models ...*dao.PersonComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personCommentDo) withDO(do gen.Dao) *personCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
