// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newEpisodeComment(db *gorm.DB) episodeComment {
	_episodeComment := episodeComment{}

	_episodeComment.episodeCommentDo.UseDB(db)
	_episodeComment.episodeCommentDo.UseModel(&dao.EpisodeComment{})

	tableName := _episodeComment.episodeCommentDo.TableName()
	_episodeComment.ALL = field.NewAsterisk(tableName)
	_episodeComment.ID = field.NewUint32(tableName, "ep_pst_id")
	_episodeComment.TopicID = field.NewUint32(tableName, "ep_pst_mid")
	_episodeComment.UID = field.NewUint32(tableName, "ep_pst_uid")
	_episodeComment.Related = field.NewUint32(tableName, "ep_pst_related")
	_episodeComment.CreatedTime = field.NewUint32(tableName, "ep_pst_dateline")
	_episodeComment.Content = field.NewString(tableName, "ep_pst_content")

	_episodeComment.fillFieldMap()

	return _episodeComment
}

type episodeComment struct {
	episodeCommentDo episodeCommentDo

	ALL         field.Asterisk
	ID          field.Uint32
	TopicID     field.Uint32
	UID         field.Uint32
	Related     field.Uint32
	CreatedTime field.Uint32
	Content     field.String

	fieldMap map[string]field.Expr
}

func (e episodeComment) Table(newTableName string) *episodeComment {
	e.episodeCommentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e episodeComment) As(alias string) *episodeComment {
	e.episodeCommentDo.DO = *(e.episodeCommentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *episodeComment) updateTableName(table string) *episodeComment {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint32(table, "ep_pst_id")
	e.TopicID = field.NewUint32(table, "ep_pst_mid")
	e.UID = field.NewUint32(table, "ep_pst_uid")
	e.Related = field.NewUint32(table, "ep_pst_related")
	e.CreatedTime = field.NewUint32(table, "ep_pst_dateline")
	e.Content = field.NewString(table, "ep_pst_content")

	e.fillFieldMap()

	return e
}

func (e *episodeComment) WithContext(ctx context.Context) *episodeCommentDo {
	return e.episodeCommentDo.WithContext(ctx)
}

func (e episodeComment) TableName() string { return e.episodeCommentDo.TableName() }

func (e episodeComment) Alias() string { return e.episodeCommentDo.Alias() }

func (e *episodeComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *episodeComment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["ep_pst_id"] = e.ID
	e.fieldMap["ep_pst_mid"] = e.TopicID
	e.fieldMap["ep_pst_uid"] = e.UID
	e.fieldMap["ep_pst_related"] = e.Related
	e.fieldMap["ep_pst_dateline"] = e.CreatedTime
	e.fieldMap["ep_pst_content"] = e.Content
}

func (e episodeComment) clone(db *gorm.DB) episodeComment {
	e.episodeCommentDo.ReplaceDB(db)
	return e
}

type episodeCommentDo struct{ gen.DO }

func (e episodeCommentDo) Debug() *episodeCommentDo {
	return e.withDO(e.DO.Debug())
}

func (e episodeCommentDo) WithContext(ctx context.Context) *episodeCommentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e episodeCommentDo) ReadDB() *episodeCommentDo {
	return e.Clauses(dbresolver.Read)
}

func (e episodeCommentDo) WriteDB() *episodeCommentDo {
	return e.Clauses(dbresolver.Write)
}

func (e episodeCommentDo) Clauses(conds ...clause.Expression) *episodeCommentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e episodeCommentDo) Returning(value interface{}, columns ...string) *episodeCommentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e episodeCommentDo) Not(conds ...gen.Condition) *episodeCommentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e episodeCommentDo) Or(conds ...gen.Condition) *episodeCommentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e episodeCommentDo) Select(conds ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e episodeCommentDo) Where(conds ...gen.Condition) *episodeCommentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e episodeCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *episodeCommentDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e episodeCommentDo) Order(conds ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e episodeCommentDo) Distinct(cols ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e episodeCommentDo) Omit(cols ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e episodeCommentDo) Join(table schema.Tabler, on ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e episodeCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e episodeCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e episodeCommentDo) Group(cols ...field.Expr) *episodeCommentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e episodeCommentDo) Having(conds ...gen.Condition) *episodeCommentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e episodeCommentDo) Limit(limit int) *episodeCommentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e episodeCommentDo) Offset(offset int) *episodeCommentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e episodeCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *episodeCommentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e episodeCommentDo) Unscoped() *episodeCommentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e episodeCommentDo) Create(values ...*dao.EpisodeComment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e episodeCommentDo) CreateInBatches(values []*dao.EpisodeComment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e episodeCommentDo) Save(values ...*dao.EpisodeComment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e episodeCommentDo) First() (*dao.EpisodeComment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpisodeComment), nil
	}
}

func (e episodeCommentDo) Take() (*dao.EpisodeComment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpisodeComment), nil
	}
}

func (e episodeCommentDo) Last() (*dao.EpisodeComment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpisodeComment), nil
	}
}

func (e episodeCommentDo) Find() ([]*dao.EpisodeComment, error) {
	result, err := e.DO.Find()
	return result.([]*dao.EpisodeComment), err
}

func (e episodeCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.EpisodeComment, err error) {
	buf := make([]*dao.EpisodeComment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e episodeCommentDo) FindInBatches(result *[]*dao.EpisodeComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e episodeCommentDo) Attrs(attrs ...field.AssignExpr) *episodeCommentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e episodeCommentDo) Assign(attrs ...field.AssignExpr) *episodeCommentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e episodeCommentDo) Joins(fields ...field.RelationField) *episodeCommentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e episodeCommentDo) Preload(fields ...field.RelationField) *episodeCommentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e episodeCommentDo) FirstOrInit() (*dao.EpisodeComment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpisodeComment), nil
	}
}

func (e episodeCommentDo) FirstOrCreate() (*dao.EpisodeComment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpisodeComment), nil
	}
}

func (e episodeCommentDo) FindByPage(offset int, limit int) (result []*dao.EpisodeComment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e episodeCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e episodeCommentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e episodeCommentDo) Delete(models ...*dao.EpisodeComment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *episodeCommentDo) withDO(do gen.Dao) *episodeCommentDo {
	e.DO = *do.(*gen.DO)
	return e
}
