openapi: 3.0.2
info:
  title: ""
  version: ""

tags:
  - name: "条目"
  - name: "章节"
  - name: "角色"
  - name: "人物"
  - name: "用户"
  - name: "收藏"
  - name: "编辑历史"
  - name: "目录"

paths:
  "/v0/search/subjects":
    post:
      tags:
        - 条目
      summary: 条目搜索
      operationId: searchSubjects
      description: |
        ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动

        目前支持的筛选条件包括:
        - `type`: 条目类型，参照 `SubjectType` enum， `或`。
        - `tag`: 标签，可以多次出现。`且` 关系。
        - `airdate`: 播出日期/发售日期。`且` 关系。
        - `rating`: 用于搜索指定评分的条目。`且` 关系。
        - `rank`: 用于搜索指定排名的条目。`且` 关系。
        - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。

        不同筛选条件之间为 `且`


        由于目前 meilisearch 的一些问题，条目排名更新并不会触发搜索数据更新，所以条目排名可能是过期数据。

        希望未来版本的 meilisearch 能解决相关的问题。

      parameters:
        - name: limit
          in: query
          description: 分页参数
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: 分页参数
          required: false
          schema:
            type: integer
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required:
                - keyword
              properties:
                keyword:
                  type: string
                sort:
                  enum:
                    - "match"
                    - "heat"
                    - "rank"
                    - "score"
                  default: match
                  type: string
                  example: rank
                  description: |
                    排序规则

                    - `match` meilisearch 的默认排序，按照匹配程度
                    - `heat` 收藏人数
                    - `rank` 排名由高到低
                    - `score` 评分
                filter:
                  type: object
                  description: 不同条件之间是 `且` 的关系
                  properties:
                    type:
                      type: array
                      items:
                        $ref: "#/components/schemas/SubjectType"
                      description: 条目类型，参照 `SubjectType` enum，多值之间为 `或` 的关系。
                    tag:
                      type: array
                      items:
                        type: string
                      example:
                        - 童年
                        - 原创
                      description: 标签，可以多次出现。多值之间为 `且` 关系。
                    air_date:
                      type: array
                      items:
                        type: string
                      example:
                        - ">=2020-07-01"
                        - "<2020-10-01"
                      description: 播出日期/发售日期，日期必需为 `YYYY-MM-DD` 格式。多值之间为 `且` 关系。
                    rating:
                      type: array
                      items:
                        type: string
                      example:
                        - ">=6"
                        - "<8"
                      description: 用于搜索指定评分的条目，多值之间为 `且` 关系。
                    rank:
                      type: array
                      items:
                        type: string
                      example:
                        - ">10"
                        - "<=18"
                      description: 用于搜索指定排名的条目，多值之间为 `且` 关系。
                    nsfw:
                      type: boolean
                      description: |
                        无权限的用户会直接忽略此字段，不会返回R18条目。

                        默认或者 `null` 会返回包含 R18 的所有搜索结果。

                        `true` 只会返回 R18 条目。

                        `false` 只会返回非 R18 条目。

      responses:
        200:
          description: 返回搜索结果
          content:
            application/json:
              schema:
                description: 用户信息
                type: object
                properties:
                  total:
                    description: 搜索结果数量
                    type: integer
                    example: 100
                  limit:
                    description: 当前分页参数
                    type: integer
                    example: 100
                  offset:
                    description: 当前分页参数
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - score
                        - id
                        - rank
                        - tags
                        - name
                        - name_cn
                        - image
                        - date
                        - summary
                      properties:
                        id:
                          description: 条目ID
                          type: integer
                          example: 8
                        type:
                          $ref: "#/components/schemas/SubjectType"
                        "date":
                          "type": "string"
                          description: 上映/开播/连载开始日期，可能为空字符串
                        "image":
                          "type": "string"
                          format: url
                          description: 封面
                        summary:
                          type: string
                          description: 条目描述
                        "name":
                          "type": "string"
                          description: 条目原名
                        "name_cn":
                          "type": "string"
                          description: 条目中文名
                        "tags":
                          $ref: "#/components/schemas/SubjectTags"
                        "score":
                          description: 评分
                          "type": "number"
                        "rank":
                          description: 排名
                          "type": "integer"

  "/v0/subjects":
    get:
      tags:
        - 条目
      summary: 浏览条目
      description: 第一页会 cache 24h，之后会 cache 1h
      operationId: getSubjects
      parameters:
        - name: type
          in: query
          description: 条目类型
          required: true
          schema:
            $ref: "#/components/schemas/SubjectType"
        - name: cat
          in: query
          description: 条目分类，参照 `SubjectCategory` enum
          required: false
          schema:
            $ref: "#/components/schemas/SubjectCategory"
        - name: series
          in: query
          description: 是否系列，仅对书籍类型的条目有效
          required: false
          schema:
            type: boolean
        - name: platform
          in: query
          description: 平台，仅对游戏类型的条目有效
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: 排序，枚举值 {date|rank}
          required: false
          schema:
            title: Sort Order
            type: string
        - name: year
          in: query
          description: 年份
          required: false
          schema:
            type: integer
        - name: month
          in: query
          description: 月份
          required: false
          schema:
            type: integer
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Subject"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []

  "/v0/subjects/{subject_id}":
    get:
      tags:
        - 条目
      summary: 获取条目
      description: cache with 300s
      operationId: getSubjectById
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Subject"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/subjects/{subject_id}/image":
    get:
      tags:
        - 条目
      summary: Get Subject Image
      operationId: getSubjectImageById
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
        - required: true
          description: 枚举值 {small|grid|large|medium|common}
          schema:
            title: Image Type
            type: string
          name: type
          in: query
      responses:
        "302":
          description: Successful Response
          headers:
            Location:
              schema:
                type: string
              description: |-
                图片链接
                无图时返回默认图片 https://lain.bgm.tv/img/no_icon_subject.png
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/subjects/{subject_id}/persons":
    get:
      tags:
        - 条目
      summary: Get Subject Persons
      operationId: getRelatedPersonsBySubjectId
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RelatedPerson"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/subjects/{subject_id}/characters":
    get:
      tags:
        - 条目
      summary: Get Subject Characters
      operationId: getRelatedCharactersBySubjectId
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RelatedCharacter"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/subjects/{subject_id}/subjects":
    get:
      tags:
        - 条目
      summary: Get Subject Relations
      operationId: getRelatedSubjectsBySubjectId
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/v0_subject_relation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/episodes":
    get:
      tags:
        - 章节
      summary: Get Episodes
      operationId: getEpisodes
      parameters:
        - $ref: "#/components/parameters/query_subject_id"
        - description: 参照章节的`type`
          required: false
          schema:
            allOf:
              - "$ref": "#/components/schemas/EpType"
            description: 参照章节的`type`
            type: integer
          name: type
          in: query
        - required: false
          description: "分页参数"
          schema:
            title: Limit
            maximum: 200
            minimum: 1
            type: integer
            default: 100
          name: limit
          in: query
        - required: false
          description: "分页参数"
          schema:
            title: Offset
            minimum: 0
            type: integer
            default: 0
          name: offset
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Episode"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/episodes/{episode_id}":
    get:
      tags:
        - 章节
      summary: Get Episode
      operationId: getEpisodeById
      parameters:
        - $ref: "#/components/parameters/path_episode_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EpisodeDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/characters/{character_id}":
    get:
      tags:
        - 角色
      summary: Get Character Detail
      description: cache with 60s
      operationId: getCharacterById
      parameters:
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CharacterDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/characters/{character_id}/image":
    get:
      tags:
        - 角色
      summary: Get Character Image
      operationId: getCharacterImageById
      parameters:
        - $ref: "#/components/parameters/path_character_id"
        - required: true
          description: 枚举值 {small|grid|large|medium}
          schema:
            title: Image Type
            type: string
          name: type
          in: query
      responses:
        "302":
          description: Successful Response
          headers:
            Location:
              schema:
                type: string
              description: |-
                图片链接
                无图时返回默认图片 https://lain.bgm.tv/img/no_icon_subject.png
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/characters/{character_id}/subjects":
    get:
      tags:
        - 角色
      summary: get character related subjects
      operationId: getRelatedSubjectsByCharacterId
      parameters:
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/v0_RelatedSubject"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/characters/{character_id}/persons":
    get:
      tags:
        - 角色
      summary: get character related persons
      operationId: getRelatedPersonsByCharacterId
      parameters:
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CharacterPerson"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/characters/{character_id}/collect":
    post:
      tags:
        - 角色
      summary: Collect character for current user
      operationId: collectCharacterByCharacterIdAndUserId
      description: 为当前用户收藏角色
      parameters:
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "204":
          description: Successful Response
        "400":
          description: character ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 角色不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []
    delete:
      tags:
        - 角色
      summary: Uncollect character for current user
      operationId: uncollectCharacterByCharacterIdAndUserId
      description: 为当前用户取消收藏角色
      parameters:
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "204":
          description: Successful Response
        "400":
          description: character ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 角色不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []

  "/v0/persons/{person_id}":
    get:
      tags:
        - 人物
      summary: Get Person
      description: cache with 60s
      operationId: getPersonById
      parameters:
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PersonDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/persons/{person_id}/image":
    get:
      tags:
        - 人物
      summary: Get Person Image
      operationId: getPersonImageById
      parameters:
        - $ref: "#/components/parameters/path_person_id"
        - required: true
          description: 枚举值 {small|grid|large|medium}
          schema:
            title: Image Type
            type: string
          name: type
          in: query
      responses:
        "302":
          description: Successful Response
          headers:
            Location:
              schema:
                type: string
              description: |-
                图片链接
                无图时返回默认图片 https://lain.bgm.tv/img/no_icon_subject.png
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/persons/{person_id}/subjects":
    get:
      tags:
        - 人物
      summary: get person related subjects
      operationId: getRelatedSubjectsByPersonId
      parameters:
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/v0_RelatedSubject"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/persons/{person_id}/characters":
    get:
      tags:
        - 人物
      summary: get person related characters
      operationId: getRelatedCharactersByPersonId
      parameters:
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PersonCharacter"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/persons/{person_id}/collect":
    post:
      tags:
        - 人物
      summary: Collect person for current user
      operationId: collectPersonByPersonIdAndUserId
      description: 为当前用户收藏人物
      parameters:
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "204":
          description: Successful Response
        "400":
          description: person ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 人物不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
    delete:
      tags:
        - 人物
      summary: Uncollect person for current user
      operationId: uncollectPersonByPersonIdAndUserId
      description: 为当前用户取消收藏人物
      parameters:
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "204":
          description: Successful Response
        "400":
          description: person ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 人物不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []

  "/v0/users/{username}":
    get:
      tags:
        - 用户
      summary: Get User by name
      description: 获取用户信息
      operationId: getUserByName
      parameters:
        - $ref: "#/components/parameters/path_username"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"

        "400":
          description: username 太长
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

        "404":
          description: 对应用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/users/{username}/avatar":
    get:
      tags:
        - 用户
      summary: Get User Avatar by name
      description: 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
      operationId: getUserAvatarByName
      parameters:
        - $ref: "#/components/parameters/path_username"
        - required: true
          description: 枚举值 {small|large|medium}
          schema:
            title: Avatar Type
            type: string
          name: type
          in: query
      responses:
        "302":
          description: Successful Response
          headers:
            Location:
              schema:
                type: string
              description: |-
                用户头像链接
                无头像时返回默认头像 https://lain.bgm.tv/pic/user/m/icon.jpg

        "400":
          description: username 太长
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

        "404":
          description: 对应用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/me":
    get:
      tags:
        - 用户
      summary: Get User
      description: 返回当前 Access Token 对应的用户信息
      operationId: getMyself
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        "403":
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []

  "/v0/users/{username}/collections":
    get:
      tags:
        - 收藏
      summary: 获取用户收藏
      description: 获取对应用户的收藏，查看私有收藏需要access token。
      operationId: getUserCollectionsByUsername
      parameters:
        - $ref: "#/components/parameters/path_username"
        - description: |-
            条目类型，默认为全部

            具体含义见 [SubjectType](#model-SubjectType)
          required: false
          schema:
            "$ref": "#/components/schemas/SubjectType"
          name: subject_type
          in: query
        - description: |-
            收藏类型，默认为全部

            具体含义见 [CollectionType](#model-CollectionType)
          required: false
          schema:
            allOf:
              - "$ref": "#/components/schemas/SubjectCollectionType"
            type: integer
          name: type
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_UserCollection"
        "404":
          description: 用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []

  "/v0/users/{username}/collections/{subject_id}":
    get:
      tags:
        - 收藏
      summary: 获取用户单个条目收藏
      description: 获取对应用户的收藏，查看私有收藏需要 access token
      operationId: getUserCollection
      parameters:
        - $ref: "#/components/parameters/path_username"
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserSubjectCollection"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 用户不存在或者条目未收藏，或者条目为私有收藏
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
  "/v0/users/-/collections/{subject_id}":
    post:
      tags:
        - 收藏
      summary: 新增或修改用户单个条目收藏
      description: |
        修改条目收藏状态, 如果不存在则创建，如果存在则修改

        由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。

        方法的所有请求体字段均可选
      operationId: postUserCollection
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserSubjectCollectionModifyPayload"
      responses:
        "204":
          description: Successful Response
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []
    patch:
      tags:
        - 收藏
      summary: 修改用户单个收藏
      description: |
        修改条目收藏状态

        由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。

        PATCH 方法的所有请求体字段均可选
      operationId: patchUserCollection
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserSubjectCollectionModifyPayload"
      responses:
        "204":
          description: Successful Response
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 用户不存在或者条目未收藏
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - OptionalHTTPBearer: []

  "/v0/users/-/collections/{subject_id}/episodes":
    get:
      tags:
        - 收藏
      summary: 章节收藏信息
      operationId: getUserSubjectEpisodeCollection
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
        - $ref: "#/components/parameters/default_query_offset"
        - required: false
          schema:
            title: Limit
            maximum: 1000
            minimum: 1
            type: integer
            default: 100
          name: limit
          description: 分页参数
          in: query
        - required: false
          schema:
            "$ref": "#/components/schemas/EpType"
          in: query
          name: episode_type
          description: 章节类型，不传则不按照章节进行筛选
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserEpisodeCollection"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 条目不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []
    patch:
      tags:
        - 收藏
      summary: 章节收藏信息
      description: |
        同时会重新计算条目的完成度
      operationId: patchUserSubjectEpisodeCollection
      parameters:
        - $ref: "#/components/parameters/path_subject_id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - episode_id
                - type
              properties:
                episode_id:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 8]
                type:
                  $ref: "#/components/schemas/EpisodeCollectionType"
      responses:
        "204":
          description: Successful Response
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 条目不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []

  "/v0/users/-/collections/-/episodes/{episode_id}":
    get:
      tags:
        - 收藏
      summary: 章节收藏信息
      operationId: getUserEpisodeCollection
      parameters:
        - $ref: "#/components/parameters/path_episode_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserEpisodeCollection"
        "400":
          description: episode ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 条目或者章节不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []
    put:
      tags:
        - 收藏
      summary: 更新章节收藏信息
      operationId: putUserEpisodeCollection
      parameters:
        - $ref: "#/components/parameters/path_episode_id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: "#/components/schemas/EpisodeCollectionType"
              required:
                - type
      responses:
        "204":
          description: Successful Response
        "400":
          description: episode ID not valid or subject not collected
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 条目或者章节不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []

  "/v0/users/{username}/collections/-/characters":
    get:
      tags:
        - 收藏
      summary: 获取用户角色收藏列表
      operationId: getUserCharacterCollections
      parameters:
        - $ref: "#/components/parameters/path_username"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_UserCharacterCollection"
        "404":
          description: 用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/users/{username}/collections/-/characters/{character_id}":
    get:
      tags:
        - 收藏
      summary: 获取用户单个角色收藏信息
      operationId: getUserCharacterCollection
      parameters:
        - $ref: "#/components/parameters/path_username"
        - $ref: "#/components/parameters/path_character_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserCharacterCollection"
        "400":
          description: character ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 用户或角色不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

  "/v0/users/{username}/collections/-/persons":
    get:
      tags:
        - 收藏
      summary: 获取用户人物收藏列表
      operationId: getUserPersonCollections
      parameters:
        - $ref: "#/components/parameters/path_username"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_UserPersonCollection"
        "404":
          description: 用户不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/users/{username}/collections/-/persons/{person_id}":
    get:
      tags:
        - 收藏
      summary: 获取用户单个人物收藏信息
      operationId: getUserPersonCollection
      parameters:
        - $ref: "#/components/parameters/path_username"
        - $ref: "#/components/parameters/path_person_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserPersonCollection"
        "400":
          description: person ID not valid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "404":
          description: 用户或人物不存在
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

  "/v0/revisions/persons":
    get:
      tags:
        - 编辑历史
      summary: Get Person Revisions
      operationId: getPersonRevisions
      parameters:
        - required: true
          schema:
            title: Person ID
            minimum: 1
            type: integer
          name: person_id
          description: 角色 ID
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Revision"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/persons/{revision_id}":
    get:
      tags:
        - 编辑历史
      summary: Get Person Revision
      operationId: getPersonRevisionByRevisionId
      parameters:
        - required: true
          schema:
            title: Revision ID
            minimum: 1
            type: integer
          name: revision_id
          description: 历史版本 ID
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PersonRevision"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/characters":
    get:
      tags:
        - 编辑历史
      summary: Get Character Revisions
      operationId: getCharacterRevisions
      parameters:
        - required: true
          schema:
            title: Character ID
            minimum: 1
            type: integer
          name: character_id
          description: 角色 ID
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Revision"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/characters/{revision_id}":
    get:
      tags:
        - 编辑历史
      summary: Get Character Revision
      operationId: getCharacterRevisionByRevisionId
      parameters:
        - $ref: "#/components/parameters/path_revision_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CharacterRevision"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/subjects":
    get:
      tags:
        - 编辑历史
      summary: Get Subject Revisions
      operationId: getSubjectRevisions
      parameters:
        - required: true
          schema:
            title: Subject ID
            minimum: 1
            type: integer
          name: subject_id
          description: 条目 ID
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Revision"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/subjects/{revision_id}":
    get:
      tags:
        - 编辑历史
      summary: Get Subject Revision
      operationId: getSubjectRevisionByRevisionId
      parameters:
        - $ref: "#/components/parameters/path_revision_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SubjectRevision"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/episodes":
    get:
      tags:
        - 编辑历史
      summary: Get Episode Revisions
      operationId: getEpisodeRevisions
      parameters:
        - required: true
          schema:
            title: Episode ID
            minimum: 1
            type: integer
          name: episode_id
          description: 章节 ID
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Paged_Revision"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
  "/v0/revisions/episodes/{revision_id}":
    get:
      tags:
        - 编辑历史
      summary: Get Episode Revision
      operationId: getEpisodeRevisionByRevisionId
      parameters:
        - $ref: "#/components/parameters/path_revision_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DetailedRevision"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"

  "/v0/indices":
    post:
      tags:
        - 目录
      summary: Create a new index
      operationId: newIndex
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Index"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDetail"
      security:
        - HTTPBearer: []
  "/v0/indices/{index_id}":
    get:
      tags:
        - 目录
      summary: Get Index By ID
      operationId: getIndexById
      parameters:
        - $ref: "#/components/parameters/path_index_id"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Index"
        "404":
          "$ref": "#/components/responses/404"
      security:
        - OptionalHTTPBearer: []
    put:
      tags:
        - 目录
      summary: Edit index's information
      operationId: editIndexById
      parameters:
        - $ref: "#/components/parameters/path_index_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexBasicInfo"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Index"
        "400":
          "$ref": "#/components/responses/400"
        "401":
          "$ref": "#/components/responses/401"
        "404":
          "$ref": "#/components/responses/404"
      security:
        - HTTPBearer: []
  "/v0/indices/{index_id}/subjects":
    get:
      tags:
        - 目录
      summary: Get Index Subjects
      operationId: getIndexSubjectsByIndexId
      parameters:
        - $ref: "#/components/parameters/path_index_id"
        - required: false
          description: "条目类型"
          schema:
            "$ref": "#/components/schemas/SubjectType"
          name: type
          in: query
        - $ref: "#/components/parameters/default_query_limit"
        - $ref: "#/components/parameters/default_query_offset"
      responses:
        "200":
          description: Successful Response
        "400":
          "$ref": "#/components/responses/400"
        "404":
          "$ref": "#/components/responses/404"
      security:
        - OptionalHTTPBearer: []
    post:
      tags:
        - 目录
      summary: Add a subject to Index
      operationId: addSubjectToIndexByIndexId
      parameters:
        - $ref: "#/components/parameters/path_index_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexSubjectAddInfo"
      responses:
        "200":
          "$ref": "#/components/responses/200-no-content"
        "400":
          "$ref": "#/components/responses/401"
        "401":
          "$ref": "#/components/responses/400"
        "404":
          "$ref": "#/components/responses/404"
      security:
        - HTTPBearer: []
  "/v0/indices/{index_id}/subjects/{subject_id}":
    put:
      tags:
        - 目录
      summary: Edit subject information in a index
      operationId: editIndexSubjectsByIndexIdAndSubjectID
      description: 如果条目不存在于目录，会创建该条目
      parameters:
        - $ref: "#/components/parameters/path_index_id"
        - $ref: "#/components/parameters/path_subject_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexSubjectEditInfo"
      responses:
        "200":
          "$ref": "#/components/responses/200-no-content"
        "404":
          "$ref": "#/components/responses/404"
        "401":
          "$ref": "#/components/responses/401"
        "400":
          "$ref": "#/components/responses/400"
      security:
        - HTTPBearer: []
    delete:
      tags:
        - 目录
      summary: Delete a subject from a Index
      operationId: delelteSubjectFromIndexByIndexIdAndSubjectID
      parameters:
        - $ref: "#/components/parameters/path_index_id"
        - $ref: "#/components/parameters/path_subject_id"
      responses:
        "200":
          "$ref": "#/components/responses/200-no-content"
        "404":
          "$ref": "#/components/responses/404"
        "401":
          "$ref": "#/components/responses/401"
      security:
        - HTTPBearer: []
  "/v0/indices/{index_id}/collect":
    post:
      tags:
        - 目录
      summary: Collect index for current user
      operationId: collectIndexByIndexIdAndUserId
      description: 为当前用户收藏一条目录
      parameters:
        - $ref: "#/components/parameters/path_index_id"
      responses:
        "200":
          "$ref": "#/components/responses/200-no-content"
        "401":
          "$ref": "#/components/responses/401"
        "404":
          "$ref": "#/components/responses/404"
        "500":
          "$ref": "#/components/responses/500"
      security:
        - HTTPBearer: []
    delete:
      tags:
        - 目录
      summary: Uncollect index for current user
      operationId: uncollectIndexByIndexIdAndUserId
      description: 为当前用户取消收藏一条目录
      parameters:
        - $ref: "#/components/parameters/path_index_id"
      responses:
        "200":
          "$ref": "#/components/responses/200-no-content"
        "401":
          "$ref": "#/components/responses/401"
        "404":
          "$ref": "#/components/responses/404"
        "500":
          "$ref": "#/components/responses/500"
      security:
        - HTTPBearer: []
components:
  parameters:
    path_subject_id:
      required: true
      name: subject_id
      description: 条目 ID
      schema:
        $ref: "#/components/schemas/SubjectID"
      in: path

    path_username:
      required: true
      schema:
        type: string
      description: 设置了用户名之后无法使用 UID。
      name: username
      in: path

    path_episode_id:
      required: true
      schema:
        title: Episode ID
        minimum: 1
        description: 剧集 ID
        type: integer
      name: episode_id
      description: 章节 ID
      in: path

    path_character_id:
      required: true
      description: 角色 ID
      schema:
        title: Character ID
        minimum: 1
        type: integer
      name: character_id
      in: path

    path_person_id:
      required: true
      schema:
        title: Person ID
        minimum: 1
        type: integer
      name: person_id
      description: 人物 ID
      in: path

    path_index_id:
      required: true
      description: "目录 ID"
      schema:
        title: Index ID
        minimum: 1
        type: integer
      name: index_id
      in: path

    query_subject_id:
      required: true
      name: subject_id
      description: 条目 ID
      schema:
        $ref: "#/components/schemas/SubjectID"
      in: query

    default_query_limit:
      required: false
      schema:
        title: Limit
        maximum: 50
        minimum: 1
        type: integer
        default: 30
      name: limit
      description: 分页参数
      in: query

    default_query_offset:
      required: false
      schema:
        title: Offset
        minimum: 0
        type: integer
        default: 0
      description: 分页参数
      name: offset
      in: query

    path_revision_id:
      required: true
      schema:
        title: Revision ID
        minimum: 1
        type: integer
      name: revision_id
      description: "版本 ID"
      in: path

  schemas:
    SubjectID:
      title: Subject ID
      minimum: 1
      description: 条目 ID
      type: integer
    User:
      $ref: "./components/user.yaml"
    Avatar:
      $ref: "./components/avatar.yaml"
    UserGroup:
      $ref: "./components/user_group.yaml"
    BloodType:
      title: BloodType
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      description: Blood type of a person. A, B, AB, O
      x-ms-enum:
        name: BloodType
        modelAsString: false
        values:
          - A
          - B
          - AB
          - O
      x-enum-varnames:
        - A
        - B
        - AB
        - O
    CharacterDetail:
      title: CharacterDetail
      required:
        - id
        - name
        - type
        - summary
        - locked
        - stat
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/CharacterType"
          description: 角色，机体，舰船，组织...
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        summary:
          title: Summary
          type: string
        locked:
          title: Locked
          type: boolean
        infobox:
          title: Infobox
          type: array
          items:
            type: object
          description: |-
            server parsed infobox, a map from key to string or tuple
            null if server infobox is not valid
        gender:
          title: Gender
          type: string
          description: parsed from wiki, maybe null
        blood_type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/BloodType"
          description: parsed from wiki, maybe null, `1, 2, 3, 4` for `A, B, AB, O`
        birth_year:
          title: Birth Year
          type: integer
          description: parsed from wiki, maybe `null`
        birth_mon:
          title: Birth Mon
          type: integer
          description: parsed from wiki, maybe `null`
        birth_day:
          title: Birth Day
          type: integer
          description: parsed from wiki, maybe `null`
        stat:
          "$ref": "#/components/schemas/Stat"
    CharacterPerson:
      title: CharacterPerson
      required:
        - id
        - name
        - type
        - subject_id
        - subject_type
        - subject_name
        - subject_name_cn
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/CharacterType"
          description: 角色，机体，舰船，组织...
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        subject_id:
          title: Subject ID
          type: integer
        subject_type:
          $ref: "#/components/schemas/SubjectType"
        subject_name:
          title: Subject Name
          type: string
        subject_name_cn:
          title: Subject Name Cn
          type: string
        staff:
          title: Staff
          type: string
    CharacterType:
      title: CharacterType
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      description: type of a character 角色，机体，舰船，组织...
      x-ms-enum:
        name: CharacterType
        modelAsString: false
        values:
          - Character
          - Mechanic
          - Ship
          - Organization
      x-enum-varnames:
        - Character
        - Mechanic
        - Ship
        - Organization
    SubjectCollectionType:
      $ref: "./components/subject_collection_type.yaml"
    EpisodeCollectionType:
      $ref: "./components/episode_collection_type.yaml"
    Creator:
      $ref: "./components/creator.yaml"
    DetailedRevision:
      title: DetailedRevision
      required:
        - id
        - type
        - summary
        - created_at
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          title: Type
          type: integer
        creator:
          "$ref": "#/components/schemas/Creator"
        summary:
          title: Summary
          type: string
        created_at:
          title: Created At
          type: string
          format: date-time
        data:
          title: Data
          type: object
          description: 编辑修改内容，响应类型不固定
    PersonRevision:
      title: PersonRevision
      allOf:
        - "$ref": "#/components/schemas/Revision"
        - type: object
          properties:
            data:
              title: Data
              type: object
              additionalProperties:
                "$ref": "#/components/schemas/PersonRevisionDataItem"
    PersonRevisionDataItem:
      title: PersonRevisionDataItem
      required:
        - prsn_infobox
        - prsn_summary
        - profession
        - extra
        - prsn_name
      type: object
      properties:
        prsn_infobox:
          title: Person Infobox
          type: string
        prsn_summary:
          title: Person Summary
          type: string
        profession:
          "$ref": "#/components/schemas/PersonRevisionProfession"
        extra:
          "$ref": "#/components/schemas/RevisionExtra"
        prsn_name:
          title: Person Name
          type: string
    PersonRevisionProfession:
      title: PersonRevisionProfession
      type: object
      properties:
        producer:
          title: Producer
          type: string
        mangaka:
          title: Mangaka
          type: string
        artist:
          title: Artist
          type: string
        seiyu:
          title: Seiyu
          type: string
        writer:
          title: Writer
          type: string
        illustrator:
          title: Illustrator
          type: string
        actor:
          title: Actor
          type: string
    RevisionExtra:
      title: RevisionExtra
      type: object
      properties:
        img:
          title: Image
          type: string
    SubjectRevision:
      title: SubjectRevision
      allOf:
        - "$ref": "#/components/schemas/Revision"
        - type: object
          properties:
            data:
              "$ref": "#/components/schemas/SubjectRevisionData"
    SubjectRevisionData:
      title: SubjectRevisionData
      required:
        - field_eps
        - field_infobox
        - field_summary
        - name
        - name_cn
        - platform
        - subject_id
        - type
        - type_id
        - vote_field
      type: object
      properties:
        field_eps:
          title: Field EPs
          type: integer
        field_infobox:
          title: Field Infobox
          type: string
        field_summary:
          title: Field Summary
          type: string
        name:
          title: Name
          type: string
        name_cn:
          title: Name CN
          type: string
        platform:
          title: Platform
          type: integer
        subject_id:
          title: Subject ID
          type: integer
        type:
          title: Type
          type: integer
        type_id:
          title: Type ID
          type: integer
        vote_field:
          title: Vote Field
          type: string
    CharacterRevision:
      title: CharacterRevision
      allOf:
        - "$ref": "#/components/schemas/Revision"
        - type: object
          properties:
            data:
              title: Data
              additionalProperties:
                "$ref": "#/components/schemas/CharacterRevisionDataItem"
    CharacterRevisionDataItem:
      title: CharacterRevisionDataItem
      required:
        - infobox
        - summary
        - name
        - extra
      type: object
      properties:
        infobox:
          title: Character Infobox
          type: string
        summary:
          title: Character Summary
          type: string
        name:
          title: Character Name
          type: string
        extra:
          "$ref": "#/components/schemas/RevisionExtra"
    EpType:
      title: EpType
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      description: |-
        本篇 = 0
        特别篇 = 1
        OP = 2
        ED = 3
        预告/宣传/广告 = 4
        MAD = 5
        其他 = 6
      x-ms-enum:
        name: EpType
        modelAsString: false
        values:
          - MainStory
          - SP
          - OP
          - ED
          - PV
          - MAD
          - Other
      x-enum-varnames:
        - MainStory
        - SP
        - OP
        - ED
        - PV
        - MAD
        - Other
    Episode:
      $ref: "./components/episode.yaml"
    EpisodeDetail:
      title: EpisodeDetail
      required:
        - id
        - type
        - name
        - name_cn
        - sort
        - airdate
        - comment
        - duration
        - desc
        - disc
        - subject_id
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          $ref: "#/components/schemas/EpType"
        name:
          title: Name
          type: string
        name_cn:
          title: Name Cn
          type: string
        sort:
          title: Sort
          type: number
          description: 同类条目的排序和集数
        ep:
          title: Ep
          type: number
          description: 条目内的集数, 从`1`开始。非本篇剧集的此字段无意义
        airdate:
          title: Airdate
          type: string
        comment:
          title: Comment
          type: integer
        duration:
          title: Duration
          type: string
        desc:
          title: Desc
          type: string
          description: 简介
        disc:
          title: Disc
          type: integer
          description: 音乐曲目的碟片数
        subject_id:
          title: Subject ID
          type: integer
    ErrorDetail:
      $ref: "./components/error_detail.yaml"
    Images:
      $ref: "./components/subject_image.yaml"
    Index:
      title: Index
      required:
        - id
        - title
        - desc
        - stat
        - created_at
        - updated_at
        - creator
        - ban
        - nsfw
      type: object
      properties:
        id:
          title: ID
          type: integer
        title:
          title: Title
          type: string
        desc:
          title: Desc
          type: string
        total:
          title: Total
          type: integer
          description: 收录条目总数
          default: 0
        stat:
          title: Stat
          type: object
          allOf:
            - "$ref": "#/components/schemas/Stat"
          description: 目录评论及收藏数
        created_at:
          title: Created At
          type: string
          format: date-time
        updated_at:
          title: Updated At
          type: string
          format: date-time
        creator:
          "$ref": "#/components/schemas/Creator"
        ban:
          title: Ban
          deprecated: true
          type: boolean
          description: deprecated, always false.
        nsfw:
          title: 目录是否包括 nsfw 条目
          type: boolean
    IndexSubject:
      title: IndexSubject
      required:
        - id
        - type
        - name
        - comment
        - added_at
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          title: Type
          type: integer
        name:
          title: Name
          type: string
        images:
          "$ref": "#/components/schemas/Images"
        infobox:
          "$ref": "#/components/schemas/WikiV0"
        date:
          title: Date
          type: string
        comment:
          title: Comment
          type: string
        added_at:
          title: Added At
          type: string
          format: date-time
      description: 同名字段意义同<a href="#model-Subject">Subject</a>
    IndexBasicInfo:
      title: IndexBasicInfo
      type: object
      description: 新增或修改条目的内容，同名字段意义同<a href="#model-Subject">Subject</a>
      properties:
        title:
          title: Title
          type: string
        description:
          title: Description
          type: string
    IndexSubjectAddInfo:
      title: IndexBasicInfo
      type: object
      description: 新增某条目到目录的请求信息
      properties:
        subject_id:
          title: Subject ID
          type: integer
        sort:
          title: Sort
          type: integer
          description: 排序条件，越小越靠前
        comment:
          title: Comment
          type: string
    IndexSubjectEditInfo:
      title: IndexBasicInfo
      type: object
      description: 修改目录中条目的信息
      properties:
        sort:
          title: Sort
          type: integer
          description: 排序条件，越小越靠前
        comment:
          title: Comment
          type: string
    WikiV0:
      $ref: "./components/wiki_v0.yaml"

    Page:
      $ref: "./components/page.yaml"

    Paged_Subject:
      title: Paged[Subject]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/Subject"
          default: []
    Paged_Episode:
      title: Paged[Episode]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/Episode"
          default: []
    Paged_IndexSubject:
      title: Paged[IndexSubject]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/IndexSubject"
          default: []
    Paged_Revision:
      title: Paged[Revision]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/Revision"
          default: []
    Paged_UserCollection:
      title: Paged[UserCollection]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/UserSubjectCollection"
          default: []
    Paged_UserCharacterCollection:
      title: Paged[UserCharacterCollection]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/UserCharacterCollection"
          default: []
    Paged_UserPersonCollection:
      title: Paged[UserPersonCollection]
      type: object
      properties:
        total:
          title: Total
          type: integer
          default: 0
        limit:
          title: Limit
          type: integer
          default: 0
        offset:
          title: Offset
          type: integer
          default: 0
        data:
          title: Data
          type: array
          items:
            "$ref": "#/components/schemas/UserPersonCollection"
          default: []
    Person:
      title: Person
      required:
        - id
        - name
        - type
        - career
        - short_summary
        - locked
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/PersonType"
          description: "`1`, `2`, `3` 表示 `个人`, `公司`, `组合`"
        career:
          type: array
          items:
            "$ref": "#/components/schemas/PersonCareer"
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        short_summary:
          title: Short Summary
          type: string
        locked:
          title: Locked
          type: boolean
    PersonCareer:
      title: PersonCareer
      enum:
        - producer
        - mangaka
        - artist
        - seiyu
        - writer
        - illustrator
        - actor
      type: string
      description: An enumeration.
    PersonCharacter:
      title: PersonCharacter
      required:
        - id
        - name
        - type
        - subject_id
        - subject_type
        - subject_name
        - subject_name_cn
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/CharacterType"
          description: 角色，机体，舰船，组织...
        images:
          title: Images
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        subject_id:
          title: Subject ID
          type: integer
        subject_type:
          $ref: "#/components/schemas/SubjectType"
        subject_name:
          title: Subject Name
          type: string
        subject_name_cn:
          title: Subject Name Cn
          type: string
        staff:
          title: Staff
          type: string
    PersonDetail:
      title: PersonDetail
      required:
        - id
        - name
        - type
        - career
        - summary
        - locked
        - last_modified
        - stat
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/PersonType"
          description: "`1`, `2`, `3` 表示 `个人`, `公司`, `组合`"
        career:
          type: array
          items:
            "$ref": "#/components/schemas/PersonCareer"
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        summary:
          title: Summary
          type: string
        locked:
          title: Locked
          type: boolean
        last_modified:
          title: Last Modified
          type: string
          description: currently it's latest user comment time, it will be replaced
            by wiki modified date in the future
          format: date-time
        infobox:
          title: Infobox
          type: array
          items:
            type: object
          description: |-
            server parsed infobox, a map from key to string or tuple
            null if server infobox is not valid
        gender:
          title: Gender
          type: string
          description: parsed from wiki, maybe null
        blood_type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/BloodType"
          description: parsed from wiki, maybe null, `1, 2, 3, 4` for `A, B, AB, O`
        birth_year:
          title: Birth Year
          type: integer
          description: parsed from wiki, maybe `null`
        birth_mon:
          title: Birth Mon
          type: integer
          description: parsed from wiki, maybe `null`
        birth_day:
          title: Birth Day
          type: integer
          description: parsed from wiki, maybe `null`
        stat:
          "$ref": "#/components/schemas/Stat"
    PersonImages:
      title: PersonImages
      required:
        - large
        - medium
        - small
        - grid
      type: object
      properties:
        large:
          title: Large
          type: string
        medium:
          title: Medium
          type: string
        small:
          title: Small
          type: string
        grid:
          title: Grid
          type: string
    PersonType:
      title: PersonType
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: "`1`, `2`, `3` 表示 `个人`, `公司`, `组合`"
      x-ms-enum:
        name: PersonType
        modelAsString: false
        values:
          - Individual
          - Corporation
          - Association
      x-enum-varnames:
        - Individual
        - Corporation
        - Association
    RelatedCharacter:
      title: RelatedCharacter
      required:
        - id
        - name
        - type
        - relation
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/CharacterType"
          description: 角色，机体，舰船，组织...
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        relation:
          title: Relation
          type: string
        actors:
          title: Actors
          type: array
          items:
            "$ref": "#/components/schemas/Person"
          description: 演员列表
          default: []
    RelatedPerson:
      title: RelatedPerson
      required:
        - id
        - name
        - type
        - career
        - relation
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/PersonType"
          description: "`1`, `2`, `3` 表示 `个人`, `公司`, `组合`"
        career:
          type: array
          items:
            "$ref": "#/components/schemas/PersonCareer"
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        relation:
          title: Relation
          type: string
    UserCharacterCollection:
      title: UserCharacterCollection
      required:
        - id
        - name
        - type
        - created_at
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/CharacterType"
          description: 角色，机体，舰船，组织...
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        created_at:
          title: Created At
          type: string
          format: date-time
    UserPersonCollection:
      title: UserPersonCollection
      required:
        - id
        - name
        - type
        - career
        - created_at
      type: object
      properties:
        id:
          title: ID
          type: integer
        name:
          title: Name
          type: string
        type:
          type: integer
          allOf:
            - "$ref": "#/components/schemas/PersonType"
          description: "`1`, `2`, `3` 表示 `个人`, `公司`, `组合`"
        career:
          type: array
          items:
            "$ref": "#/components/schemas/PersonCareer"
        images:
          title: Images
          type: object
          allOf:
            - "$ref": "#/components/schemas/PersonImages"
          description: object with some size of images, this object maybe `null`
        created_at:
          title: Created At
          type: string
          format: date-time
    Revision:
      title: Revision
      required:
        - id
        - type
        - summary
        - created_at
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          title: Type
          type: integer
        creator:
          "$ref": "#/components/schemas/Creator"
        summary:
          title: Summary
          type: string
        created_at:
          title: Created At
          type: string
          format: date-time
    Stat:
      title: Stat
      required:
        - comments
        - collects
      type: object
      properties:
        comments:
          title: Comments
          type: integer
        collects:
          title: Collects
          type: integer
    Subject:
      $ref: "./components/subject_v0.yaml"
    SlimSubject:
      $ref: "./components/subject_v0_slim.yaml"
    SubjectTags:
      $ref: "./components/subject_tags.yaml"
    SubjectType:
      $ref: "./components/subject_type.yaml"
    SubjectBookCategory:
      $ref: "./components/subject_cat_book.yaml"
    SubjectAnimeCategory:
      $ref: "./components/subject_cat_anime.yaml"
    SubjectGameCategory:
      $ref: "./components/subject_cat_game.yaml"
    SubjectRealCategory:
      $ref: "./components/subject_cat_real.yaml"
    SubjectCategory:
      anyOf:
        - $ref: "#/components/schemas/SubjectBookCategory"
        - $ref: "#/components/schemas/SubjectAnimeCategory"
        - $ref: "#/components/schemas/SubjectGameCategory"
        - $ref: "#/components/schemas/SubjectRealCategory"
    UserSubjectCollection:
      $ref: "./components/user_subject_collection.yaml"
    UserSubjectCollectionModifyPayload:
      $ref: "./components/user_subject_collection_modify_payload.yaml"
    UserEpisodeCollection:
      $ref: "./components/get-user-episodes-collection.yaml"
    v0_RelatedSubject:
      title: RelatedSubject
      required:
        - id
        - type
        - staff
        - name
        - name_cn
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          $ref: "#/components/schemas/SubjectType"
        staff:
          title: Staff
          type: string
        name:
          title: Name
          type: string
        name_cn:
          title: Name Cn
          type: string
        image:
          title: Image
          type: string
    v0_subject_relation:
      title: SubjectRelation
      required:
        - id
        - type
        - name
        - name_cn
        - relation
      type: object
      properties:
        id:
          title: ID
          type: integer
        type:
          title: Type
          type: integer
        name:
          title: Name
          type: string
        name_cn:
          title: Name Cn
          type: string
        images:
          "$ref": "#/components/schemas/Images"
        relation:
          title: Relation
          type: string
  securitySchemes:
    OptionalHTTPBearer:
      type: http
      description: 不强制要求用户认证，但是可能看不到某些敏感内容内容（如 NSFW 或者仅用户自己可见的收藏）
      scheme: Bearer
    HTTPBearer:
      type: http
      description: 需要使用 access token 进行认证
      scheme: Bearer
  responses:
    200-no-content:
      description: Successful Response
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorDetail"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorDetail"
    404:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorDetail"
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorDetail"
